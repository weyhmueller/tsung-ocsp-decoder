%% Generated by the Erlang ASN.1 BER-compiler version, utilizing bit-syntax:1.7
%% Purpose: encoder and decoder to the types in mod OCSP

-module('OCSP').
-include("OCSP.hrl").
-define('RT_BER',asn1rt_ber_bin).
-asn1_info([{vsn,'1.7'},
            {module,'OCSP'},
            {options,[ber_bin,der,verbose,{i,[46]}]}]).

-export([encoding_rule/0]).
-export([
'enc_AuthorityKeyIdentifier'/2,
'enc_KeyIdentifier'/2,
'enc_SubjectKeyIdentifier'/2,
'enc_KeyUsage'/2,
'enc_PrivateKeyUsagePeriod'/2,
'enc_CertificatePolicies'/2,
'enc_PolicyInformation'/2,
'enc_CertPolicyId'/2,
'enc_PolicyQualifierInfo'/2,
'enc_PolicyQualifierId'/2,
'enc_CPSuri'/2,
'enc_UserNotice'/2,
'enc_NoticeReference'/2,
'enc_DisplayText'/2,
'enc_PolicyMappings'/2,
'enc_SubjectAltName'/2,
'enc_GeneralNames'/2,
'enc_GeneralName'/2,
'enc_AnotherName'/2,
'enc_EDIPartyName'/2,
'enc_IssuerAltName'/2,
'enc_SubjectDirectoryAttributes'/2,
'enc_BasicConstraints'/2,
'enc_NameConstraints'/2,
'enc_GeneralSubtrees'/2,
'enc_GeneralSubtree'/2,
'enc_BaseDistance'/2,
'enc_PolicyConstraints'/2,
'enc_SkipCerts'/2,
'enc_CRLDistributionPoints'/2,
'enc_DistributionPoint'/2,
'enc_DistributionPointName'/2,
'enc_ReasonFlags'/2,
'enc_ExtKeyUsageSyntax'/2,
'enc_KeyPurposeId'/2,
'enc_InhibitAnyPolicy'/2,
'enc_FreshestCRL'/2,
'enc_AuthorityInfoAccessSyntax'/2,
'enc_AccessDescription'/2,
'enc_SubjectInfoAccessSyntax'/2,
'enc_CRLNumber'/2,
'enc_IssuingDistributionPoint'/2,
'enc_BaseCRLNumber'/2,
'enc_CRLReason'/2,
'enc_CertificateIssuer'/2,
'enc_HoldInstructionCode'/2,
'enc_InvalidityDate'/2,
'enc_Attribute'/2,
'enc_AttributeType'/2,
'enc_AttributeValue'/2,
'enc_AttributeTypeAndValue'/2,
'enc_X520name'/2,
'enc_X520CommonName'/2,
'enc_X520LocalityName'/2,
'enc_X520StateOrProvinceName'/2,
'enc_X520OrganizationName'/2,
'enc_X520OrganizationalUnitName'/2,
'enc_X520Title'/2,
'enc_X520dnQualifier'/2,
'enc_X520countryName'/2,
'enc_X520SerialNumber'/2,
'enc_X520Pseudonym'/2,
'enc_DomainComponent'/2,
'enc_EmailAddress'/2,
'enc_Name'/2,
'enc_RDNSequence'/2,
'enc_DistinguishedName'/2,
'enc_RelativeDistinguishedName'/2,
'enc_DirectoryString'/2,
'enc_Certificate'/2,
'enc_TBSCertificate'/2,
'enc_Version'/2,
'enc_CertificateSerialNumber'/2,
'enc_Validity'/2,
'enc_Time'/2,
'enc_UniqueIdentifier'/2,
'enc_SubjectPublicKeyInfo'/2,
'enc_Extensions'/2,
'enc_Extension'/2,
'enc_CertificateList'/2,
'enc_TBSCertList'/2,
'enc_AlgorithmIdentifier'/2,
'enc_ORAddress'/2,
'enc_BuiltInStandardAttributes'/2,
'enc_CountryName'/2,
'enc_AdministrationDomainName'/2,
'enc_NetworkAddress'/2,
'enc_X121Address'/2,
'enc_TerminalIdentifier'/2,
'enc_PrivateDomainName'/2,
'enc_OrganizationName'/2,
'enc_NumericUserIdentifier'/2,
'enc_PersonalName'/2,
'enc_OrganizationalUnitNames'/2,
'enc_OrganizationalUnitName'/2,
'enc_BuiltInDomainDefinedAttributes'/2,
'enc_BuiltInDomainDefinedAttribute'/2,
'enc_ExtensionAttributes'/2,
'enc_ExtensionAttribute'/2,
'enc_CommonName'/2,
'enc_TeletexCommonName'/2,
'enc_TeletexOrganizationName'/2,
'enc_TeletexPersonalName'/2,
'enc_TeletexOrganizationalUnitNames'/2,
'enc_TeletexOrganizationalUnitName'/2,
'enc_PDSName'/2,
'enc_PhysicalDeliveryCountryName'/2,
'enc_PostalCode'/2,
'enc_PhysicalDeliveryOfficeName'/2,
'enc_PhysicalDeliveryOfficeNumber'/2,
'enc_ExtensionORAddressComponents'/2,
'enc_PhysicalDeliveryPersonalName'/2,
'enc_PhysicalDeliveryOrganizationName'/2,
'enc_ExtensionPhysicalDeliveryAddressComponents'/2,
'enc_UnformattedPostalAddress'/2,
'enc_StreetAddress'/2,
'enc_PostOfficeBoxAddress'/2,
'enc_PosteRestanteAddress'/2,
'enc_UniquePostalName'/2,
'enc_LocalPostalAttributes'/2,
'enc_PDSParameter'/2,
'enc_ExtendedNetworkAddress'/2,
'enc_PresentationAddress'/2,
'enc_TerminalType'/2,
'enc_TeletexDomainDefinedAttributes'/2,
'enc_TeletexDomainDefinedAttribute'/2,
'enc_OCSPRequest'/2,
'enc_TBSRequest'/2,
'enc_Signature'/2,
'enc_Request'/2,
'enc_CertID'/2,
'enc_OCSPResponse'/2,
'enc_OCSPResponseStatus'/2,
'enc_ResponseBytes'/2,
'enc_BasicOCSPResponse'/2,
'enc_ResponseData'/2,
'enc_ResponderID'/2,
'enc_KeyHash'/2,
'enc_SingleResponse'/2,
'enc_CertStatus'/2,
'enc_RevokedInfo'/2,
'enc_UnknownInfo'/2,
'enc_ArchiveCutoff'/2,
'enc_AcceptableResponses'/2,
'enc_ServiceLocator'/2
]).

-export([
'dec_AuthorityKeyIdentifier'/2,
'dec_KeyIdentifier'/2,
'dec_SubjectKeyIdentifier'/2,
'dec_KeyUsage'/2,
'dec_PrivateKeyUsagePeriod'/2,
'dec_CertificatePolicies'/2,
'dec_PolicyInformation'/2,
'dec_CertPolicyId'/2,
'dec_PolicyQualifierInfo'/2,
'dec_PolicyQualifierId'/2,
'dec_CPSuri'/2,
'dec_UserNotice'/2,
'dec_NoticeReference'/2,
'dec_DisplayText'/2,
'dec_PolicyMappings'/2,
'dec_SubjectAltName'/2,
'dec_GeneralNames'/2,
'dec_GeneralName'/2,
'dec_AnotherName'/2,
'dec_EDIPartyName'/2,
'dec_IssuerAltName'/2,
'dec_SubjectDirectoryAttributes'/2,
'dec_BasicConstraints'/2,
'dec_NameConstraints'/2,
'dec_GeneralSubtrees'/2,
'dec_GeneralSubtree'/2,
'dec_BaseDistance'/2,
'dec_PolicyConstraints'/2,
'dec_SkipCerts'/2,
'dec_CRLDistributionPoints'/2,
'dec_DistributionPoint'/2,
'dec_DistributionPointName'/2,
'dec_ReasonFlags'/2,
'dec_ExtKeyUsageSyntax'/2,
'dec_KeyPurposeId'/2,
'dec_InhibitAnyPolicy'/2,
'dec_FreshestCRL'/2,
'dec_AuthorityInfoAccessSyntax'/2,
'dec_AccessDescription'/2,
'dec_SubjectInfoAccessSyntax'/2,
'dec_CRLNumber'/2,
'dec_IssuingDistributionPoint'/2,
'dec_BaseCRLNumber'/2,
'dec_CRLReason'/2,
'dec_CertificateIssuer'/2,
'dec_HoldInstructionCode'/2,
'dec_InvalidityDate'/2,
'dec_Attribute'/2,
'dec_AttributeType'/2,
'dec_AttributeValue'/2,
'dec_AttributeTypeAndValue'/2,
'dec_X520name'/2,
'dec_X520CommonName'/2,
'dec_X520LocalityName'/2,
'dec_X520StateOrProvinceName'/2,
'dec_X520OrganizationName'/2,
'dec_X520OrganizationalUnitName'/2,
'dec_X520Title'/2,
'dec_X520dnQualifier'/2,
'dec_X520countryName'/2,
'dec_X520SerialNumber'/2,
'dec_X520Pseudonym'/2,
'dec_DomainComponent'/2,
'dec_EmailAddress'/2,
'dec_Name'/2,
'dec_RDNSequence'/2,
'dec_DistinguishedName'/2,
'dec_RelativeDistinguishedName'/2,
'dec_DirectoryString'/2,
'dec_Certificate'/2,
'dec_TBSCertificate'/2,
'dec_Version'/2,
'dec_CertificateSerialNumber'/2,
'dec_Validity'/2,
'dec_Time'/2,
'dec_UniqueIdentifier'/2,
'dec_SubjectPublicKeyInfo'/2,
'dec_Extensions'/2,
'dec_Extension'/2,
'dec_CertificateList'/2,
'dec_TBSCertList'/2,
'dec_AlgorithmIdentifier'/2,
'dec_ORAddress'/2,
'dec_BuiltInStandardAttributes'/2,
'dec_CountryName'/2,
'dec_AdministrationDomainName'/2,
'dec_NetworkAddress'/2,
'dec_X121Address'/2,
'dec_TerminalIdentifier'/2,
'dec_PrivateDomainName'/2,
'dec_OrganizationName'/2,
'dec_NumericUserIdentifier'/2,
'dec_PersonalName'/2,
'dec_OrganizationalUnitNames'/2,
'dec_OrganizationalUnitName'/2,
'dec_BuiltInDomainDefinedAttributes'/2,
'dec_BuiltInDomainDefinedAttribute'/2,
'dec_ExtensionAttributes'/2,
'dec_ExtensionAttribute'/2,
'dec_CommonName'/2,
'dec_TeletexCommonName'/2,
'dec_TeletexOrganizationName'/2,
'dec_TeletexPersonalName'/2,
'dec_TeletexOrganizationalUnitNames'/2,
'dec_TeletexOrganizationalUnitName'/2,
'dec_PDSName'/2,
'dec_PhysicalDeliveryCountryName'/2,
'dec_PostalCode'/2,
'dec_PhysicalDeliveryOfficeName'/2,
'dec_PhysicalDeliveryOfficeNumber'/2,
'dec_ExtensionORAddressComponents'/2,
'dec_PhysicalDeliveryPersonalName'/2,
'dec_PhysicalDeliveryOrganizationName'/2,
'dec_ExtensionPhysicalDeliveryAddressComponents'/2,
'dec_UnformattedPostalAddress'/2,
'dec_StreetAddress'/2,
'dec_PostOfficeBoxAddress'/2,
'dec_PosteRestanteAddress'/2,
'dec_UniquePostalName'/2,
'dec_LocalPostalAttributes'/2,
'dec_PDSParameter'/2,
'dec_ExtendedNetworkAddress'/2,
'dec_PresentationAddress'/2,
'dec_TerminalType'/2,
'dec_TeletexDomainDefinedAttributes'/2,
'dec_TeletexDomainDefinedAttribute'/2,
'dec_OCSPRequest'/2,
'dec_TBSRequest'/2,
'dec_Signature'/2,
'dec_Request'/2,
'dec_CertID'/2,
'dec_OCSPResponse'/2,
'dec_OCSPResponseStatus'/2,
'dec_ResponseBytes'/2,
'dec_BasicOCSPResponse'/2,
'dec_ResponseData'/2,
'dec_ResponderID'/2,
'dec_KeyHash'/2,
'dec_SingleResponse'/2,
'dec_CertStatus'/2,
'dec_RevokedInfo'/2,
'dec_UnknownInfo'/2,
'dec_ArchiveCutoff'/2,
'dec_AcceptableResponses'/2,
'dec_ServiceLocator'/2
]).

-export([
'dec_AuthorityKeyIdentifier'/3,
'dec_KeyIdentifier'/3,
'dec_SubjectKeyIdentifier'/3,
'dec_KeyUsage'/3,
'dec_PrivateKeyUsagePeriod'/3,
'dec_CertificatePolicies'/3,
'dec_PolicyInformation'/3,
'dec_CertPolicyId'/3,
'dec_PolicyQualifierInfo'/3,
'dec_PolicyQualifierId'/3,
'dec_CPSuri'/3,
'dec_UserNotice'/3,
'dec_NoticeReference'/3,
'dec_DisplayText'/3,
'dec_PolicyMappings'/3,
'dec_SubjectAltName'/3,
'dec_GeneralNames'/3,
'dec_GeneralName'/3,
'dec_AnotherName'/3,
'dec_EDIPartyName'/3,
'dec_IssuerAltName'/3,
'dec_SubjectDirectoryAttributes'/3,
'dec_BasicConstraints'/3,
'dec_NameConstraints'/3,
'dec_GeneralSubtrees'/3,
'dec_GeneralSubtree'/3,
'dec_BaseDistance'/3,
'dec_PolicyConstraints'/3,
'dec_SkipCerts'/3,
'dec_CRLDistributionPoints'/3,
'dec_DistributionPoint'/3,
'dec_DistributionPointName'/3,
'dec_ReasonFlags'/3,
'dec_ExtKeyUsageSyntax'/3,
'dec_KeyPurposeId'/3,
'dec_InhibitAnyPolicy'/3,
'dec_FreshestCRL'/3,
'dec_AuthorityInfoAccessSyntax'/3,
'dec_AccessDescription'/3,
'dec_SubjectInfoAccessSyntax'/3,
'dec_CRLNumber'/3,
'dec_IssuingDistributionPoint'/3,
'dec_BaseCRLNumber'/3,
'dec_CRLReason'/3,
'dec_CertificateIssuer'/3,
'dec_HoldInstructionCode'/3,
'dec_InvalidityDate'/3,
'dec_Attribute'/3,
'dec_AttributeType'/3,
'dec_AttributeValue'/3,
'dec_AttributeTypeAndValue'/3,
'dec_X520name'/3,
'dec_X520CommonName'/3,
'dec_X520LocalityName'/3,
'dec_X520StateOrProvinceName'/3,
'dec_X520OrganizationName'/3,
'dec_X520OrganizationalUnitName'/3,
'dec_X520Title'/3,
'dec_X520dnQualifier'/3,
'dec_X520countryName'/3,
'dec_X520SerialNumber'/3,
'dec_X520Pseudonym'/3,
'dec_DomainComponent'/3,
'dec_EmailAddress'/3,
'dec_Name'/3,
'dec_RDNSequence'/3,
'dec_DistinguishedName'/3,
'dec_RelativeDistinguishedName'/3,
'dec_DirectoryString'/3,
'dec_Certificate'/3,
'dec_TBSCertificate'/3,
'dec_Version'/3,
'dec_CertificateSerialNumber'/3,
'dec_Validity'/3,
'dec_Time'/3,
'dec_UniqueIdentifier'/3,
'dec_SubjectPublicKeyInfo'/3,
'dec_Extensions'/3,
'dec_Extension'/3,
'dec_CertificateList'/3,
'dec_TBSCertList'/3,
'dec_AlgorithmIdentifier'/3,
'dec_ORAddress'/3,
'dec_BuiltInStandardAttributes'/3,
'dec_CountryName'/3,
'dec_AdministrationDomainName'/3,
'dec_NetworkAddress'/3,
'dec_X121Address'/3,
'dec_TerminalIdentifier'/3,
'dec_PrivateDomainName'/3,
'dec_OrganizationName'/3,
'dec_NumericUserIdentifier'/3,
'dec_PersonalName'/3,
'dec_OrganizationalUnitNames'/3,
'dec_OrganizationalUnitName'/3,
'dec_BuiltInDomainDefinedAttributes'/3,
'dec_BuiltInDomainDefinedAttribute'/3,
'dec_ExtensionAttributes'/3,
'dec_ExtensionAttribute'/3,
'dec_CommonName'/3,
'dec_TeletexCommonName'/3,
'dec_TeletexOrganizationName'/3,
'dec_TeletexPersonalName'/3,
'dec_TeletexOrganizationalUnitNames'/3,
'dec_TeletexOrganizationalUnitName'/3,
'dec_PDSName'/3,
'dec_PhysicalDeliveryCountryName'/3,
'dec_PostalCode'/3,
'dec_PhysicalDeliveryOfficeName'/3,
'dec_PhysicalDeliveryOfficeNumber'/3,
'dec_ExtensionORAddressComponents'/3,
'dec_PhysicalDeliveryPersonalName'/3,
'dec_PhysicalDeliveryOrganizationName'/3,
'dec_ExtensionPhysicalDeliveryAddressComponents'/3,
'dec_UnformattedPostalAddress'/3,
'dec_StreetAddress'/3,
'dec_PostOfficeBoxAddress'/3,
'dec_PosteRestanteAddress'/3,
'dec_UniquePostalName'/3,
'dec_LocalPostalAttributes'/3,
'dec_PDSParameter'/3,
'dec_ExtendedNetworkAddress'/3,
'dec_PresentationAddress'/3,
'dec_TerminalType'/3,
'dec_TeletexDomainDefinedAttributes'/3,
'dec_TeletexDomainDefinedAttribute'/3,
'dec_OCSPRequest'/3,
'dec_TBSRequest'/3,
'dec_Signature'/3,
'dec_Request'/3,
'dec_CertID'/3,
'dec_OCSPResponse'/3,
'dec_OCSPResponseStatus'/3,
'dec_ResponseBytes'/3,
'dec_BasicOCSPResponse'/3,
'dec_ResponseData'/3,
'dec_ResponderID'/3,
'dec_KeyHash'/3,
'dec_SingleResponse'/3,
'dec_CertStatus'/3,
'dec_RevokedInfo'/3,
'dec_UnknownInfo'/3,
'dec_ArchiveCutoff'/3,
'dec_AcceptableResponses'/3,
'dec_ServiceLocator'/3
]).

-export([
'id-ce'/0,
'id-ce-authorityKeyIdentifier'/0,
'id-ce-subjectKeyIdentifier'/0,
'id-ce-keyUsage'/0,
'id-ce-privateKeyUsagePeriod'/0,
'id-ce-certificatePolicies'/0,
'anyPolicy'/0,
'id-ce-policyMappings'/0,
'id-ce-subjectAltName'/0,
'id-ce-issuerAltName'/0,
'id-ce-subjectDirectoryAttributes'/0,
'id-ce-basicConstraints'/0,
'id-ce-nameConstraints'/0,
'id-ce-policyConstraints'/0,
'id-ce-cRLDistributionPoints'/0,
'id-ce-extKeyUsage'/0,
'anyExtendedKeyUsage'/0,
'id-kp-serverAuth'/0,
'id-kp-clientAuth'/0,
'id-kp-codeSigning'/0,
'id-kp-emailProtection'/0,
'id-kp-timeStamping'/0,
'id-kp-OCSPSigning'/0,
'id-ce-inhibitAnyPolicy'/0,
'id-ce-freshestCRL'/0,
'id-pe-authorityInfoAccess'/0,
'id-pe-subjectInfoAccess'/0,
'id-ce-cRLNumber'/0,
'id-ce-issuingDistributionPoint'/0,
'id-ce-deltaCRLIndicator'/0,
'id-ce-cRLReasons'/0,
'id-ce-certificateIssuer'/0,
'id-ce-holdInstructionCode'/0,
'holdInstruction'/0,
'id-holdinstruction-none'/0,
'id-holdinstruction-callissuer'/0,
'id-holdinstruction-reject'/0,
'id-ce-invalidityDate'/0,
'id-pkix'/0,
'id-pe'/0,
'id-qt'/0,
'id-kp'/0,
'id-ad'/0,
'id-qt-cps'/0,
'id-qt-unotice'/0,
'id-ad-ocsp'/0,
'id-ad-caIssuers'/0,
'id-ad-timeStamping'/0,
'id-ad-caRepository'/0,
'id-at'/0,
'id-at-name'/0,
'id-at-surname'/0,
'id-at-givenName'/0,
'id-at-initials'/0,
'id-at-generationQualifier'/0,
'id-at-commonName'/0,
'id-at-localityName'/0,
'id-at-stateOrProvinceName'/0,
'id-at-organizationName'/0,
'id-at-organizationalUnitName'/0,
'id-at-title'/0,
'id-at-dnQualifier'/0,
'id-at-countryName'/0,
'id-at-serialNumber'/0,
'id-at-pseudonym'/0,
'id-domainComponent'/0,
'pkcs-9'/0,
'id-emailAddress'/0,
'common-name'/0,
'teletex-common-name'/0,
'teletex-organization-name'/0,
'teletex-personal-name'/0,
'teletex-organizational-unit-names'/0,
'pds-name'/0,
'physical-delivery-country-name'/0,
'postal-code'/0,
'physical-delivery-office-name'/0,
'physical-delivery-office-number'/0,
'extension-OR-address-components'/0,
'physical-delivery-personal-name'/0,
'physical-delivery-organization-name'/0,
'extension-physical-delivery-address-components'/0,
'unformatted-postal-address'/0,
'street-address'/0,
'post-office-box-address'/0,
'poste-restante-address'/0,
'unique-postal-name'/0,
'local-postal-attributes'/0,
'extended-network-address'/0,
'terminal-type'/0,
'teletex-domain-defined-attributes'/0,
'ub-name'/0,
'ub-common-name'/0,
'ub-locality-name'/0,
'ub-state-name'/0,
'ub-organization-name'/0,
'ub-organizational-unit-name'/0,
'ub-title'/0,
'ub-serial-number'/0,
'ub-match'/0,
'ub-emailaddress-length'/0,
'ub-common-name-length'/0,
'ub-country-name-alpha-length'/0,
'ub-country-name-numeric-length'/0,
'ub-domain-defined-attributes'/0,
'ub-domain-defined-attribute-type-length'/0,
'ub-domain-defined-attribute-value-length'/0,
'ub-domain-name-length'/0,
'ub-extension-attributes'/0,
'ub-e163-4-number-length'/0,
'ub-e163-4-sub-address-length'/0,
'ub-generation-qualifier-length'/0,
'ub-given-name-length'/0,
'ub-initials-length'/0,
'ub-integer-options'/0,
'ub-numeric-user-id-length'/0,
'ub-organization-name-length'/0,
'ub-organizational-unit-name-length'/0,
'ub-organizational-units'/0,
'ub-pds-name-length'/0,
'ub-pds-parameter-length'/0,
'ub-pds-physical-address-lines'/0,
'ub-postal-code-length'/0,
'ub-pseudonym'/0,
'ub-surname-length'/0,
'ub-terminal-id-length'/0,
'ub-unformatted-address-length'/0,
'ub-x121-address-length'/0,
'id-pkix-ocsp'/0,
'id-pkix-ocsp-basic'/0,
'id-pkix-ocsp-nonce'/0,
'id-pkix-ocsp-crl'/0,
'id-pkix-ocsp-response'/0,
'id-pkix-ocsp-nocheck'/0,
'id-pkix-ocsp-archive-cutoff'/0,
'id-pkix-ocsp-service-locator'/0
]).

-export([info/0]).


-export([encode/2,decode/2,encode_disp/2,decode_disp/2]).

encoding_rule() ->
   ber_bin.

encode(Type,Data) ->
case catch encode_disp(Type,Data) of
  {'EXIT',{error,Reason}} ->
    {error,Reason};
  {'EXIT',Reason} ->
    {error,{asn1,Reason}};
  {Bytes,_Len} ->
    {ok,Bytes};
  Bytes ->
    {ok,Bytes}
end.

decode(Type,Data) ->
case catch decode_disp(Type,Data) of
  {'EXIT',{error,Reason}} ->
    {error,Reason};
  {'EXIT',Reason} ->
    {error,{asn1,Reason}};
  {X,_Rest} ->
    {ok,X};
  {X,_Rest,_Len} ->
    {ok,X}
end.

encode_disp('AuthorityKeyIdentifier',Data) -> 'enc_AuthorityKeyIdentifier'(Data,[]);
encode_disp('KeyIdentifier',Data) -> 'enc_KeyIdentifier'(Data,[]);
encode_disp('SubjectKeyIdentifier',Data) -> 'enc_SubjectKeyIdentifier'(Data,[]);
encode_disp('KeyUsage',Data) -> 'enc_KeyUsage'(Data,[]);
encode_disp('PrivateKeyUsagePeriod',Data) -> 'enc_PrivateKeyUsagePeriod'(Data,[]);
encode_disp('CertificatePolicies',Data) -> 'enc_CertificatePolicies'(Data,[]);
encode_disp('PolicyInformation',Data) -> 'enc_PolicyInformation'(Data,[]);
encode_disp('CertPolicyId',Data) -> 'enc_CertPolicyId'(Data,[]);
encode_disp('PolicyQualifierInfo',Data) -> 'enc_PolicyQualifierInfo'(Data,[]);
encode_disp('PolicyQualifierId',Data) -> 'enc_PolicyQualifierId'(Data,[]);
encode_disp('CPSuri',Data) -> 'enc_CPSuri'(Data,[]);
encode_disp('UserNotice',Data) -> 'enc_UserNotice'(Data,[]);
encode_disp('NoticeReference',Data) -> 'enc_NoticeReference'(Data,[]);
encode_disp('DisplayText',Data) -> 'enc_DisplayText'(Data,[]);
encode_disp('PolicyMappings',Data) -> 'enc_PolicyMappings'(Data,[]);
encode_disp('SubjectAltName',Data) -> 'enc_SubjectAltName'(Data,[]);
encode_disp('GeneralNames',Data) -> 'enc_GeneralNames'(Data,[]);
encode_disp('GeneralName',Data) -> 'enc_GeneralName'(Data,[]);
encode_disp('AnotherName',Data) -> 'enc_AnotherName'(Data,[]);
encode_disp('EDIPartyName',Data) -> 'enc_EDIPartyName'(Data,[]);
encode_disp('IssuerAltName',Data) -> 'enc_IssuerAltName'(Data,[]);
encode_disp('SubjectDirectoryAttributes',Data) -> 'enc_SubjectDirectoryAttributes'(Data,[]);
encode_disp('BasicConstraints',Data) -> 'enc_BasicConstraints'(Data,[]);
encode_disp('NameConstraints',Data) -> 'enc_NameConstraints'(Data,[]);
encode_disp('GeneralSubtrees',Data) -> 'enc_GeneralSubtrees'(Data,[]);
encode_disp('GeneralSubtree',Data) -> 'enc_GeneralSubtree'(Data,[]);
encode_disp('BaseDistance',Data) -> 'enc_BaseDistance'(Data,[]);
encode_disp('PolicyConstraints',Data) -> 'enc_PolicyConstraints'(Data,[]);
encode_disp('SkipCerts',Data) -> 'enc_SkipCerts'(Data,[]);
encode_disp('CRLDistributionPoints',Data) -> 'enc_CRLDistributionPoints'(Data,[]);
encode_disp('DistributionPoint',Data) -> 'enc_DistributionPoint'(Data,[]);
encode_disp('DistributionPointName',Data) -> 'enc_DistributionPointName'(Data,[]);
encode_disp('ReasonFlags',Data) -> 'enc_ReasonFlags'(Data,[]);
encode_disp('ExtKeyUsageSyntax',Data) -> 'enc_ExtKeyUsageSyntax'(Data,[]);
encode_disp('KeyPurposeId',Data) -> 'enc_KeyPurposeId'(Data,[]);
encode_disp('InhibitAnyPolicy',Data) -> 'enc_InhibitAnyPolicy'(Data,[]);
encode_disp('FreshestCRL',Data) -> 'enc_FreshestCRL'(Data,[]);
encode_disp('AuthorityInfoAccessSyntax',Data) -> 'enc_AuthorityInfoAccessSyntax'(Data,[]);
encode_disp('AccessDescription',Data) -> 'enc_AccessDescription'(Data,[]);
encode_disp('SubjectInfoAccessSyntax',Data) -> 'enc_SubjectInfoAccessSyntax'(Data,[]);
encode_disp('CRLNumber',Data) -> 'enc_CRLNumber'(Data,[]);
encode_disp('IssuingDistributionPoint',Data) -> 'enc_IssuingDistributionPoint'(Data,[]);
encode_disp('BaseCRLNumber',Data) -> 'enc_BaseCRLNumber'(Data,[]);
encode_disp('CRLReason',Data) -> 'enc_CRLReason'(Data,[]);
encode_disp('CertificateIssuer',Data) -> 'enc_CertificateIssuer'(Data,[]);
encode_disp('HoldInstructionCode',Data) -> 'enc_HoldInstructionCode'(Data,[]);
encode_disp('InvalidityDate',Data) -> 'enc_InvalidityDate'(Data,[]);
encode_disp('Attribute',Data) -> 'enc_Attribute'(Data,[]);
encode_disp('AttributeType',Data) -> 'enc_AttributeType'(Data,[]);
encode_disp('AttributeValue',Data) -> 'enc_AttributeValue'(Data,[]);
encode_disp('AttributeTypeAndValue',Data) -> 'enc_AttributeTypeAndValue'(Data,[]);
encode_disp('X520name',Data) -> 'enc_X520name'(Data,[]);
encode_disp('X520CommonName',Data) -> 'enc_X520CommonName'(Data,[]);
encode_disp('X520LocalityName',Data) -> 'enc_X520LocalityName'(Data,[]);
encode_disp('X520StateOrProvinceName',Data) -> 'enc_X520StateOrProvinceName'(Data,[]);
encode_disp('X520OrganizationName',Data) -> 'enc_X520OrganizationName'(Data,[]);
encode_disp('X520OrganizationalUnitName',Data) -> 'enc_X520OrganizationalUnitName'(Data,[]);
encode_disp('X520Title',Data) -> 'enc_X520Title'(Data,[]);
encode_disp('X520dnQualifier',Data) -> 'enc_X520dnQualifier'(Data,[]);
encode_disp('X520countryName',Data) -> 'enc_X520countryName'(Data,[]);
encode_disp('X520SerialNumber',Data) -> 'enc_X520SerialNumber'(Data,[]);
encode_disp('X520Pseudonym',Data) -> 'enc_X520Pseudonym'(Data,[]);
encode_disp('DomainComponent',Data) -> 'enc_DomainComponent'(Data,[]);
encode_disp('EmailAddress',Data) -> 'enc_EmailAddress'(Data,[]);
encode_disp('Name',Data) -> 'enc_Name'(Data,[]);
encode_disp('RDNSequence',Data) -> 'enc_RDNSequence'(Data,[]);
encode_disp('DistinguishedName',Data) -> 'enc_DistinguishedName'(Data,[]);
encode_disp('RelativeDistinguishedName',Data) -> 'enc_RelativeDistinguishedName'(Data,[]);
encode_disp('DirectoryString',Data) -> 'enc_DirectoryString'(Data,[]);
encode_disp('Certificate',Data) -> 'enc_Certificate'(Data,[]);
encode_disp('TBSCertificate',Data) -> 'enc_TBSCertificate'(Data,[]);
encode_disp('Version',Data) -> 'enc_Version'(Data,[]);
encode_disp('CertificateSerialNumber',Data) -> 'enc_CertificateSerialNumber'(Data,[]);
encode_disp('Validity',Data) -> 'enc_Validity'(Data,[]);
encode_disp('Time',Data) -> 'enc_Time'(Data,[]);
encode_disp('UniqueIdentifier',Data) -> 'enc_UniqueIdentifier'(Data,[]);
encode_disp('SubjectPublicKeyInfo',Data) -> 'enc_SubjectPublicKeyInfo'(Data,[]);
encode_disp('Extensions',Data) -> 'enc_Extensions'(Data,[]);
encode_disp('Extension',Data) -> 'enc_Extension'(Data,[]);
encode_disp('CertificateList',Data) -> 'enc_CertificateList'(Data,[]);
encode_disp('TBSCertList',Data) -> 'enc_TBSCertList'(Data,[]);
encode_disp('AlgorithmIdentifier',Data) -> 'enc_AlgorithmIdentifier'(Data,[]);
encode_disp('ORAddress',Data) -> 'enc_ORAddress'(Data,[]);
encode_disp('BuiltInStandardAttributes',Data) -> 'enc_BuiltInStandardAttributes'(Data,[]);
encode_disp('CountryName',Data) -> 'enc_CountryName'(Data,[]);
encode_disp('AdministrationDomainName',Data) -> 'enc_AdministrationDomainName'(Data,[]);
encode_disp('NetworkAddress',Data) -> 'enc_NetworkAddress'(Data,[]);
encode_disp('X121Address',Data) -> 'enc_X121Address'(Data,[]);
encode_disp('TerminalIdentifier',Data) -> 'enc_TerminalIdentifier'(Data,[]);
encode_disp('PrivateDomainName',Data) -> 'enc_PrivateDomainName'(Data,[]);
encode_disp('OrganizationName',Data) -> 'enc_OrganizationName'(Data,[]);
encode_disp('NumericUserIdentifier',Data) -> 'enc_NumericUserIdentifier'(Data,[]);
encode_disp('PersonalName',Data) -> 'enc_PersonalName'(Data,[]);
encode_disp('OrganizationalUnitNames',Data) -> 'enc_OrganizationalUnitNames'(Data,[]);
encode_disp('OrganizationalUnitName',Data) -> 'enc_OrganizationalUnitName'(Data,[]);
encode_disp('BuiltInDomainDefinedAttributes',Data) -> 'enc_BuiltInDomainDefinedAttributes'(Data,[]);
encode_disp('BuiltInDomainDefinedAttribute',Data) -> 'enc_BuiltInDomainDefinedAttribute'(Data,[]);
encode_disp('ExtensionAttributes',Data) -> 'enc_ExtensionAttributes'(Data,[]);
encode_disp('ExtensionAttribute',Data) -> 'enc_ExtensionAttribute'(Data,[]);
encode_disp('CommonName',Data) -> 'enc_CommonName'(Data,[]);
encode_disp('TeletexCommonName',Data) -> 'enc_TeletexCommonName'(Data,[]);
encode_disp('TeletexOrganizationName',Data) -> 'enc_TeletexOrganizationName'(Data,[]);
encode_disp('TeletexPersonalName',Data) -> 'enc_TeletexPersonalName'(Data,[]);
encode_disp('TeletexOrganizationalUnitNames',Data) -> 'enc_TeletexOrganizationalUnitNames'(Data,[]);
encode_disp('TeletexOrganizationalUnitName',Data) -> 'enc_TeletexOrganizationalUnitName'(Data,[]);
encode_disp('PDSName',Data) -> 'enc_PDSName'(Data,[]);
encode_disp('PhysicalDeliveryCountryName',Data) -> 'enc_PhysicalDeliveryCountryName'(Data,[]);
encode_disp('PostalCode',Data) -> 'enc_PostalCode'(Data,[]);
encode_disp('PhysicalDeliveryOfficeName',Data) -> 'enc_PhysicalDeliveryOfficeName'(Data,[]);
encode_disp('PhysicalDeliveryOfficeNumber',Data) -> 'enc_PhysicalDeliveryOfficeNumber'(Data,[]);
encode_disp('ExtensionORAddressComponents',Data) -> 'enc_ExtensionORAddressComponents'(Data,[]);
encode_disp('PhysicalDeliveryPersonalName',Data) -> 'enc_PhysicalDeliveryPersonalName'(Data,[]);
encode_disp('PhysicalDeliveryOrganizationName',Data) -> 'enc_PhysicalDeliveryOrganizationName'(Data,[]);
encode_disp('ExtensionPhysicalDeliveryAddressComponents',Data) -> 'enc_ExtensionPhysicalDeliveryAddressComponents'(Data,[]);
encode_disp('UnformattedPostalAddress',Data) -> 'enc_UnformattedPostalAddress'(Data,[]);
encode_disp('StreetAddress',Data) -> 'enc_StreetAddress'(Data,[]);
encode_disp('PostOfficeBoxAddress',Data) -> 'enc_PostOfficeBoxAddress'(Data,[]);
encode_disp('PosteRestanteAddress',Data) -> 'enc_PosteRestanteAddress'(Data,[]);
encode_disp('UniquePostalName',Data) -> 'enc_UniquePostalName'(Data,[]);
encode_disp('LocalPostalAttributes',Data) -> 'enc_LocalPostalAttributes'(Data,[]);
encode_disp('PDSParameter',Data) -> 'enc_PDSParameter'(Data,[]);
encode_disp('ExtendedNetworkAddress',Data) -> 'enc_ExtendedNetworkAddress'(Data,[]);
encode_disp('PresentationAddress',Data) -> 'enc_PresentationAddress'(Data,[]);
encode_disp('TerminalType',Data) -> 'enc_TerminalType'(Data,[]);
encode_disp('TeletexDomainDefinedAttributes',Data) -> 'enc_TeletexDomainDefinedAttributes'(Data,[]);
encode_disp('TeletexDomainDefinedAttribute',Data) -> 'enc_TeletexDomainDefinedAttribute'(Data,[]);
encode_disp('OCSPRequest',Data) -> 'enc_OCSPRequest'(Data,[]);
encode_disp('TBSRequest',Data) -> 'enc_TBSRequest'(Data,[]);
encode_disp('Signature',Data) -> 'enc_Signature'(Data,[]);
encode_disp('Request',Data) -> 'enc_Request'(Data,[]);
encode_disp('CertID',Data) -> 'enc_CertID'(Data,[]);
encode_disp('OCSPResponse',Data) -> 'enc_OCSPResponse'(Data,[]);
encode_disp('OCSPResponseStatus',Data) -> 'enc_OCSPResponseStatus'(Data,[]);
encode_disp('ResponseBytes',Data) -> 'enc_ResponseBytes'(Data,[]);
encode_disp('BasicOCSPResponse',Data) -> 'enc_BasicOCSPResponse'(Data,[]);
encode_disp('ResponseData',Data) -> 'enc_ResponseData'(Data,[]);
encode_disp('ResponderID',Data) -> 'enc_ResponderID'(Data,[]);
encode_disp('KeyHash',Data) -> 'enc_KeyHash'(Data,[]);
encode_disp('SingleResponse',Data) -> 'enc_SingleResponse'(Data,[]);
encode_disp('CertStatus',Data) -> 'enc_CertStatus'(Data,[]);
encode_disp('RevokedInfo',Data) -> 'enc_RevokedInfo'(Data,[]);
encode_disp('UnknownInfo',Data) -> 'enc_UnknownInfo'(Data,[]);
encode_disp('ArchiveCutoff',Data) -> 'enc_ArchiveCutoff'(Data,[]);
encode_disp('AcceptableResponses',Data) -> 'enc_AcceptableResponses'(Data,[]);
encode_disp('ServiceLocator',Data) -> 'enc_ServiceLocator'(Data,[]);
encode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).


decode_disp('AuthorityKeyIdentifier',Data) -> 'dec_AuthorityKeyIdentifier'(Data,mandatory);
decode_disp('KeyIdentifier',Data) -> 'dec_KeyIdentifier'(Data,mandatory);
decode_disp('SubjectKeyIdentifier',Data) -> 'dec_SubjectKeyIdentifier'(Data,mandatory);
decode_disp('KeyUsage',Data) -> 'dec_KeyUsage'(Data,mandatory);
decode_disp('PrivateKeyUsagePeriod',Data) -> 'dec_PrivateKeyUsagePeriod'(Data,mandatory);
decode_disp('CertificatePolicies',Data) -> 'dec_CertificatePolicies'(Data,mandatory);
decode_disp('PolicyInformation',Data) -> 'dec_PolicyInformation'(Data,mandatory);
decode_disp('CertPolicyId',Data) -> 'dec_CertPolicyId'(Data,mandatory);
decode_disp('PolicyQualifierInfo',Data) -> 'dec_PolicyQualifierInfo'(Data,mandatory);
decode_disp('PolicyQualifierId',Data) -> 'dec_PolicyQualifierId'(Data,mandatory);
decode_disp('CPSuri',Data) -> 'dec_CPSuri'(Data,mandatory);
decode_disp('UserNotice',Data) -> 'dec_UserNotice'(Data,mandatory);
decode_disp('NoticeReference',Data) -> 'dec_NoticeReference'(Data,mandatory);
decode_disp('DisplayText',Data) -> 'dec_DisplayText'(Data,mandatory);
decode_disp('PolicyMappings',Data) -> 'dec_PolicyMappings'(Data,mandatory);
decode_disp('SubjectAltName',Data) -> 'dec_SubjectAltName'(Data,mandatory);
decode_disp('GeneralNames',Data) -> 'dec_GeneralNames'(Data,mandatory);
decode_disp('GeneralName',Data) -> 'dec_GeneralName'(Data,mandatory);
decode_disp('AnotherName',Data) -> 'dec_AnotherName'(Data,mandatory);
decode_disp('EDIPartyName',Data) -> 'dec_EDIPartyName'(Data,mandatory);
decode_disp('IssuerAltName',Data) -> 'dec_IssuerAltName'(Data,mandatory);
decode_disp('SubjectDirectoryAttributes',Data) -> 'dec_SubjectDirectoryAttributes'(Data,mandatory);
decode_disp('BasicConstraints',Data) -> 'dec_BasicConstraints'(Data,mandatory);
decode_disp('NameConstraints',Data) -> 'dec_NameConstraints'(Data,mandatory);
decode_disp('GeneralSubtrees',Data) -> 'dec_GeneralSubtrees'(Data,mandatory);
decode_disp('GeneralSubtree',Data) -> 'dec_GeneralSubtree'(Data,mandatory);
decode_disp('BaseDistance',Data) -> 'dec_BaseDistance'(Data,mandatory);
decode_disp('PolicyConstraints',Data) -> 'dec_PolicyConstraints'(Data,mandatory);
decode_disp('SkipCerts',Data) -> 'dec_SkipCerts'(Data,mandatory);
decode_disp('CRLDistributionPoints',Data) -> 'dec_CRLDistributionPoints'(Data,mandatory);
decode_disp('DistributionPoint',Data) -> 'dec_DistributionPoint'(Data,mandatory);
decode_disp('DistributionPointName',Data) -> 'dec_DistributionPointName'(Data,mandatory);
decode_disp('ReasonFlags',Data) -> 'dec_ReasonFlags'(Data,mandatory);
decode_disp('ExtKeyUsageSyntax',Data) -> 'dec_ExtKeyUsageSyntax'(Data,mandatory);
decode_disp('KeyPurposeId',Data) -> 'dec_KeyPurposeId'(Data,mandatory);
decode_disp('InhibitAnyPolicy',Data) -> 'dec_InhibitAnyPolicy'(Data,mandatory);
decode_disp('FreshestCRL',Data) -> 'dec_FreshestCRL'(Data,mandatory);
decode_disp('AuthorityInfoAccessSyntax',Data) -> 'dec_AuthorityInfoAccessSyntax'(Data,mandatory);
decode_disp('AccessDescription',Data) -> 'dec_AccessDescription'(Data,mandatory);
decode_disp('SubjectInfoAccessSyntax',Data) -> 'dec_SubjectInfoAccessSyntax'(Data,mandatory);
decode_disp('CRLNumber',Data) -> 'dec_CRLNumber'(Data,mandatory);
decode_disp('IssuingDistributionPoint',Data) -> 'dec_IssuingDistributionPoint'(Data,mandatory);
decode_disp('BaseCRLNumber',Data) -> 'dec_BaseCRLNumber'(Data,mandatory);
decode_disp('CRLReason',Data) -> 'dec_CRLReason'(Data,mandatory);
decode_disp('CertificateIssuer',Data) -> 'dec_CertificateIssuer'(Data,mandatory);
decode_disp('HoldInstructionCode',Data) -> 'dec_HoldInstructionCode'(Data,mandatory);
decode_disp('InvalidityDate',Data) -> 'dec_InvalidityDate'(Data,mandatory);
decode_disp('Attribute',Data) -> 'dec_Attribute'(Data,mandatory);
decode_disp('AttributeType',Data) -> 'dec_AttributeType'(Data,mandatory);
decode_disp('AttributeValue',Data) -> 'dec_AttributeValue'(Data,mandatory);
decode_disp('AttributeTypeAndValue',Data) -> 'dec_AttributeTypeAndValue'(Data,mandatory);
decode_disp('X520name',Data) -> 'dec_X520name'(Data,mandatory);
decode_disp('X520CommonName',Data) -> 'dec_X520CommonName'(Data,mandatory);
decode_disp('X520LocalityName',Data) -> 'dec_X520LocalityName'(Data,mandatory);
decode_disp('X520StateOrProvinceName',Data) -> 'dec_X520StateOrProvinceName'(Data,mandatory);
decode_disp('X520OrganizationName',Data) -> 'dec_X520OrganizationName'(Data,mandatory);
decode_disp('X520OrganizationalUnitName',Data) -> 'dec_X520OrganizationalUnitName'(Data,mandatory);
decode_disp('X520Title',Data) -> 'dec_X520Title'(Data,mandatory);
decode_disp('X520dnQualifier',Data) -> 'dec_X520dnQualifier'(Data,mandatory);
decode_disp('X520countryName',Data) -> 'dec_X520countryName'(Data,mandatory);
decode_disp('X520SerialNumber',Data) -> 'dec_X520SerialNumber'(Data,mandatory);
decode_disp('X520Pseudonym',Data) -> 'dec_X520Pseudonym'(Data,mandatory);
decode_disp('DomainComponent',Data) -> 'dec_DomainComponent'(Data,mandatory);
decode_disp('EmailAddress',Data) -> 'dec_EmailAddress'(Data,mandatory);
decode_disp('Name',Data) -> 'dec_Name'(Data,mandatory);
decode_disp('RDNSequence',Data) -> 'dec_RDNSequence'(Data,mandatory);
decode_disp('DistinguishedName',Data) -> 'dec_DistinguishedName'(Data,mandatory);
decode_disp('RelativeDistinguishedName',Data) -> 'dec_RelativeDistinguishedName'(Data,mandatory);
decode_disp('DirectoryString',Data) -> 'dec_DirectoryString'(Data,mandatory);
decode_disp('Certificate',Data) -> 'dec_Certificate'(Data,mandatory);
decode_disp('TBSCertificate',Data) -> 'dec_TBSCertificate'(Data,mandatory);
decode_disp('Version',Data) -> 'dec_Version'(Data,mandatory);
decode_disp('CertificateSerialNumber',Data) -> 'dec_CertificateSerialNumber'(Data,mandatory);
decode_disp('Validity',Data) -> 'dec_Validity'(Data,mandatory);
decode_disp('Time',Data) -> 'dec_Time'(Data,mandatory);
decode_disp('UniqueIdentifier',Data) -> 'dec_UniqueIdentifier'(Data,mandatory);
decode_disp('SubjectPublicKeyInfo',Data) -> 'dec_SubjectPublicKeyInfo'(Data,mandatory);
decode_disp('Extensions',Data) -> 'dec_Extensions'(Data,mandatory);
decode_disp('Extension',Data) -> 'dec_Extension'(Data,mandatory);
decode_disp('CertificateList',Data) -> 'dec_CertificateList'(Data,mandatory);
decode_disp('TBSCertList',Data) -> 'dec_TBSCertList'(Data,mandatory);
decode_disp('AlgorithmIdentifier',Data) -> 'dec_AlgorithmIdentifier'(Data,mandatory);
decode_disp('ORAddress',Data) -> 'dec_ORAddress'(Data,mandatory);
decode_disp('BuiltInStandardAttributes',Data) -> 'dec_BuiltInStandardAttributes'(Data,mandatory);
decode_disp('CountryName',Data) -> 'dec_CountryName'(Data,mandatory);
decode_disp('AdministrationDomainName',Data) -> 'dec_AdministrationDomainName'(Data,mandatory);
decode_disp('NetworkAddress',Data) -> 'dec_NetworkAddress'(Data,mandatory);
decode_disp('X121Address',Data) -> 'dec_X121Address'(Data,mandatory);
decode_disp('TerminalIdentifier',Data) -> 'dec_TerminalIdentifier'(Data,mandatory);
decode_disp('PrivateDomainName',Data) -> 'dec_PrivateDomainName'(Data,mandatory);
decode_disp('OrganizationName',Data) -> 'dec_OrganizationName'(Data,mandatory);
decode_disp('NumericUserIdentifier',Data) -> 'dec_NumericUserIdentifier'(Data,mandatory);
decode_disp('PersonalName',Data) -> 'dec_PersonalName'(Data,mandatory);
decode_disp('OrganizationalUnitNames',Data) -> 'dec_OrganizationalUnitNames'(Data,mandatory);
decode_disp('OrganizationalUnitName',Data) -> 'dec_OrganizationalUnitName'(Data,mandatory);
decode_disp('BuiltInDomainDefinedAttributes',Data) -> 'dec_BuiltInDomainDefinedAttributes'(Data,mandatory);
decode_disp('BuiltInDomainDefinedAttribute',Data) -> 'dec_BuiltInDomainDefinedAttribute'(Data,mandatory);
decode_disp('ExtensionAttributes',Data) -> 'dec_ExtensionAttributes'(Data,mandatory);
decode_disp('ExtensionAttribute',Data) -> 'dec_ExtensionAttribute'(Data,mandatory);
decode_disp('CommonName',Data) -> 'dec_CommonName'(Data,mandatory);
decode_disp('TeletexCommonName',Data) -> 'dec_TeletexCommonName'(Data,mandatory);
decode_disp('TeletexOrganizationName',Data) -> 'dec_TeletexOrganizationName'(Data,mandatory);
decode_disp('TeletexPersonalName',Data) -> 'dec_TeletexPersonalName'(Data,mandatory);
decode_disp('TeletexOrganizationalUnitNames',Data) -> 'dec_TeletexOrganizationalUnitNames'(Data,mandatory);
decode_disp('TeletexOrganizationalUnitName',Data) -> 'dec_TeletexOrganizationalUnitName'(Data,mandatory);
decode_disp('PDSName',Data) -> 'dec_PDSName'(Data,mandatory);
decode_disp('PhysicalDeliveryCountryName',Data) -> 'dec_PhysicalDeliveryCountryName'(Data,mandatory);
decode_disp('PostalCode',Data) -> 'dec_PostalCode'(Data,mandatory);
decode_disp('PhysicalDeliveryOfficeName',Data) -> 'dec_PhysicalDeliveryOfficeName'(Data,mandatory);
decode_disp('PhysicalDeliveryOfficeNumber',Data) -> 'dec_PhysicalDeliveryOfficeNumber'(Data,mandatory);
decode_disp('ExtensionORAddressComponents',Data) -> 'dec_ExtensionORAddressComponents'(Data,mandatory);
decode_disp('PhysicalDeliveryPersonalName',Data) -> 'dec_PhysicalDeliveryPersonalName'(Data,mandatory);
decode_disp('PhysicalDeliveryOrganizationName',Data) -> 'dec_PhysicalDeliveryOrganizationName'(Data,mandatory);
decode_disp('ExtensionPhysicalDeliveryAddressComponents',Data) -> 'dec_ExtensionPhysicalDeliveryAddressComponents'(Data,mandatory);
decode_disp('UnformattedPostalAddress',Data) -> 'dec_UnformattedPostalAddress'(Data,mandatory);
decode_disp('StreetAddress',Data) -> 'dec_StreetAddress'(Data,mandatory);
decode_disp('PostOfficeBoxAddress',Data) -> 'dec_PostOfficeBoxAddress'(Data,mandatory);
decode_disp('PosteRestanteAddress',Data) -> 'dec_PosteRestanteAddress'(Data,mandatory);
decode_disp('UniquePostalName',Data) -> 'dec_UniquePostalName'(Data,mandatory);
decode_disp('LocalPostalAttributes',Data) -> 'dec_LocalPostalAttributes'(Data,mandatory);
decode_disp('PDSParameter',Data) -> 'dec_PDSParameter'(Data,mandatory);
decode_disp('ExtendedNetworkAddress',Data) -> 'dec_ExtendedNetworkAddress'(Data,mandatory);
decode_disp('PresentationAddress',Data) -> 'dec_PresentationAddress'(Data,mandatory);
decode_disp('TerminalType',Data) -> 'dec_TerminalType'(Data,mandatory);
decode_disp('TeletexDomainDefinedAttributes',Data) -> 'dec_TeletexDomainDefinedAttributes'(Data,mandatory);
decode_disp('TeletexDomainDefinedAttribute',Data) -> 'dec_TeletexDomainDefinedAttribute'(Data,mandatory);
decode_disp('OCSPRequest',Data) -> 'dec_OCSPRequest'(Data,mandatory);
decode_disp('TBSRequest',Data) -> 'dec_TBSRequest'(Data,mandatory);
decode_disp('Signature',Data) -> 'dec_Signature'(Data,mandatory);
decode_disp('Request',Data) -> 'dec_Request'(Data,mandatory);
decode_disp('CertID',Data) -> 'dec_CertID'(Data,mandatory);
decode_disp('OCSPResponse',Data) -> 'dec_OCSPResponse'(Data,mandatory);
decode_disp('OCSPResponseStatus',Data) -> 'dec_OCSPResponseStatus'(Data,mandatory);
decode_disp('ResponseBytes',Data) -> 'dec_ResponseBytes'(Data,mandatory);
decode_disp('BasicOCSPResponse',Data) -> 'dec_BasicOCSPResponse'(Data,mandatory);
decode_disp('ResponseData',Data) -> 'dec_ResponseData'(Data,mandatory);
decode_disp('ResponderID',Data) -> 'dec_ResponderID'(Data,mandatory);
decode_disp('KeyHash',Data) -> 'dec_KeyHash'(Data,mandatory);
decode_disp('SingleResponse',Data) -> 'dec_SingleResponse'(Data,mandatory);
decode_disp('CertStatus',Data) -> 'dec_CertStatus'(Data,mandatory);
decode_disp('RevokedInfo',Data) -> 'dec_RevokedInfo'(Data,mandatory);
decode_disp('UnknownInfo',Data) -> 'dec_UnknownInfo'(Data,mandatory);
decode_disp('ArchiveCutoff',Data) -> 'dec_ArchiveCutoff'(Data,mandatory);
decode_disp('AcceptableResponses',Data) -> 'dec_AcceptableResponses'(Data,mandatory);
decode_disp('ServiceLocator',Data) -> 'dec_ServiceLocator'(Data,mandatory);
decode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).





info() ->
   case ?MODULE:module_info() of
      MI when is_list(MI) ->
         case lists:keysearch(attributes,1,MI) of
            {value,{_,Attributes}} when is_list(Attributes) ->
               case lists:keysearch(asn1_info,1,Attributes) of
                  {value,{_,Info}} when is_list(Info) ->
                     Info;
                  _ ->
                     []
               end;
            _ ->
               []
         end
   end.


%%================================
%%  AuthorityKeyIdentifier
%%================================
'enc_AuthorityKeyIdentifier'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,keyIdentifier) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_octet_string([], ?RT_BER:cindex(2,Val,keyIdentifier), [{tag,128,0,'EXPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 2   External OCSP:GeneralNames OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,authorityCertIssuer) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_GeneralNames'(?RT_BER:cindex(3,Val,authorityCertIssuer), [{tag,128,1,'EXPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 3 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,authorityCertSerialNumber) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(4,Val,authorityCertSerialNumber), [{tag,128,2,'EXPLICIT',32}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_AuthorityKeyIdentifier'(Bytes, OptOrMand) ->
   'dec_AuthorityKeyIdentifier'(Bytes, OptOrMand, []).

'dec_AuthorityKeyIdentifier'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<2:2,_:1,0:5,_/binary>> ->
?RT_BER:decode_octet_string(Bytes2,[],[{tag,128,0,'EXPLICIT',32}], no_length, mandatory);
_ ->
{ asn1_NOVALUE, Bytes2, 0 }
end,

%%-------------------------------------------------
%% attribute number 2   External OCSP:GeneralNames OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
'dec_GeneralNames'(Bytes3, opt_or_default, [{tag,128,1,'EXPLICIT',32}]);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

%%-------------------------------------------------
%% attribute number 3 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = case Bytes4 of
<<2:2,_:1,2:5,_/binary>> ->
?RT_BER:decode_integer(Bytes4,[],[{tag,128,2,'EXPLICIT',32}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes4, 0 }
end,

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'AuthorityKeyIdentifier', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.


%%================================
%%  KeyIdentifier
%%================================

'enc_KeyIdentifier'({'KeyIdentifier',Val}, TagIn) ->
   'enc_KeyIdentifier'(Val, TagIn);

'enc_KeyIdentifier'(Val, TagIn) ->
?RT_BER:encode_octet_string([], Val, TagIn ++ []).


'dec_KeyIdentifier'(Bytes, OptOrMand) ->
   'dec_KeyIdentifier'(Bytes, OptOrMand, []).

'dec_KeyIdentifier'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_octet_string(Bytes,[],TagIn++[], no_length, OptOrMand).



%%================================
%%  SubjectKeyIdentifier
%%================================

'enc_SubjectKeyIdentifier'({'SubjectKeyIdentifier',Val}, TagIn) ->
   'enc_SubjectKeyIdentifier'(Val, TagIn);

'enc_SubjectKeyIdentifier'(Val, TagIn) ->
?RT_BER:encode_octet_string([], Val, TagIn ++ []).


'dec_SubjectKeyIdentifier'(Bytes, OptOrMand) ->
   'dec_SubjectKeyIdentifier'(Bytes, OptOrMand, []).

'dec_SubjectKeyIdentifier'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_octet_string(Bytes,[],TagIn++[], no_length, OptOrMand).



%%================================
%%  KeyUsage
%%================================

'enc_KeyUsage'({'KeyUsage',Val}, TagIn) ->
   'enc_KeyUsage'(Val, TagIn);

'enc_KeyUsage'(Val, TagIn) ->
?RT_BER:encode_bit_string([], Val, [{digitalSignature,0},{nonRepudiation,1},{keyEncipherment,2},{dataEncipherment,3},{keyAgreement,4},{keyCertSign,5},{cRLSign,6},{encipherOnly,7},{decipherOnly,8}], TagIn ++ []).


'dec_KeyUsage'(Bytes, OptOrMand) ->
   'dec_KeyUsage'(Bytes, OptOrMand, []).

'dec_KeyUsage'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_bit_string(Bytes,[],[{digitalSignature,0},{nonRepudiation,1},{keyEncipherment,2},{dataEncipherment,3},{keyAgreement,4},{keyCertSign,5},{cRLSign,6},{encipherOnly,7},{decipherOnly,8}],TagIn++[], no_length, OptOrMand).



%%================================
%%  PrivateKeyUsagePeriod
%%================================
'enc_PrivateKeyUsagePeriod'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type GeneralizedTime OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,notBefore) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_generalized_time([], ?RT_BER:cindex(2,Val,notBefore), [{tag,128,0,'EXPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 2 with type GeneralizedTime OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,notAfter) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_generalized_time([], ?RT_BER:cindex(3,Val,notAfter), [{tag,128,1,'EXPLICIT',32}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_PrivateKeyUsagePeriod'(Bytes, OptOrMand) ->
   'dec_PrivateKeyUsagePeriod'(Bytes, OptOrMand, []).

'dec_PrivateKeyUsagePeriod'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type GeneralizedTime OPTIONAL
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<2:2,_:1,0:5,_/binary>> ->
?RT_BER:decode_generalized_time(Bytes2,[],[{tag,128,0,'EXPLICIT',32}], no_length, mandatory);
_ ->
{ asn1_NOVALUE, Bytes2, 0 }
end,

%%-------------------------------------------------
%% attribute number 2 with type GeneralizedTime OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
?RT_BER:decode_generalized_time(Bytes3,[],[{tag,128,1,'EXPLICIT',32}], no_length, mandatory);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'PrivateKeyUsagePeriod', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  CertificatePolicies
%%================================

'enc_CertificatePolicies'({'CertificatePolicies',Val}, TagIn) ->
   'enc_CertificatePolicies'(Val, TagIn);

'enc_CertificatePolicies'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_CertificatePolicies_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_CertificatePolicies_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_CertificatePolicies_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_PolicyInformation'(H, []),
   'enc_CertificatePolicies_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_CertificatePolicies'(Bytes, OptOrMand) ->
   'dec_CertificatePolicies'(Bytes, OptOrMand, []).

'dec_CertificatePolicies'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_PolicyInformation'/3, [], []).




%%================================
%%  PolicyInformation
%%================================
'enc_PolicyInformation'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type OBJECT IDENTIFIER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_object_identifier(?RT_BER:cindex(2,Val,policyIdentifier), []),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,policyQualifiers) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_PolicyInformation_policyQualifiers'(?RT_BER:cindex(3,Val,policyQualifiers), [])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  PolicyInformation_policyQualifiers
%%================================

'enc_PolicyInformation_policyQualifiers'({'PolicyInformation_policyQualifiers',Val}, TagIn) ->
   'enc_PolicyInformation_policyQualifiers'(Val, TagIn);

'enc_PolicyInformation_policyQualifiers'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_PolicyInformation_policyQualifiers_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_PolicyInformation_policyQualifiers_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_PolicyInformation_policyQualifiers_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_PolicyQualifierInfo'(H, []),
   'enc_PolicyInformation_policyQualifiers_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_PolicyInformation_policyQualifiers'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_PolicyQualifierInfo'/3, [], []).




'dec_PolicyInformation'(Bytes, OptOrMand) ->
   'dec_PolicyInformation'(Bytes, OptOrMand, []).

'dec_PolicyInformation'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type OBJECT IDENTIFIER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_object_identifier(Bytes2,[], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<0:2,_:1,16:5,_/binary>> ->
'dec_PolicyInformation_policyQualifiers'(Bytes3, opt_or_default, []);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'PolicyInformation', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  CertPolicyId
%%================================

'enc_CertPolicyId'({'CertPolicyId',Val}, TagIn) ->
   'enc_CertPolicyId'(Val, TagIn);

'enc_CertPolicyId'(Val, TagIn) ->
?RT_BER:encode_object_identifier(Val, TagIn ++ []).


'dec_CertPolicyId'(Bytes, OptOrMand) ->
   'dec_CertPolicyId'(Bytes, OptOrMand, []).

'dec_CertPolicyId'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_object_identifier(Bytes,TagIn++[], OptOrMand).



%%================================
%%  PolicyQualifierInfo
%%================================
'enc_PolicyQualifierInfo'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type OBJECT IDENTIFIER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_object_identifier(?RT_BER:cindex(2,Val,policyQualifierId), []),

%%-------------------------------------------------
%% attribute number 2 with type ASN1_OPEN_TYPE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_open_type(?RT_BER:cindex(3,Val,qualifier), []),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_PolicyQualifierInfo'(Bytes, OptOrMand) ->
   'dec_PolicyQualifierInfo'(Bytes, OptOrMand, []).

'dec_PolicyQualifierInfo'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type OBJECT IDENTIFIER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_object_identifier(Bytes2,[], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type ASN1_OPEN_TYPE
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_open_type(ber_bin,Bytes3,[]),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'PolicyQualifierInfo', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  PolicyQualifierId
%%================================

'enc_PolicyQualifierId'({'PolicyQualifierId',Val}, TagIn) ->
   'enc_PolicyQualifierId'(Val, TagIn);

'enc_PolicyQualifierId'(Val, TagIn) ->
?RT_BER:encode_object_identifier(Val, TagIn ++ []).


'dec_PolicyQualifierId'(Bytes, OptOrMand) ->
   'dec_PolicyQualifierId'(Bytes, OptOrMand, []).

'dec_PolicyQualifierId'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_object_identifier(Bytes,TagIn++[], OptOrMand).



%%================================
%%  CPSuri
%%================================

'enc_CPSuri'({'CPSuri',Val}, TagIn) ->
   'enc_CPSuri'(Val, TagIn);

'enc_CPSuri'(Val, TagIn) ->
?RT_BER:encode_restricted_string([], Val, 22, TagIn ++ []).


'dec_CPSuri'(Bytes, OptOrMand) ->
   'dec_CPSuri'(Bytes, OptOrMand, []).

'dec_CPSuri'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_restricted_string(Bytes,[],22,TagIn++[], no_length, OptOrMand).



%%================================
%%  UserNotice
%%================================
'enc_UserNotice'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External OCSP:NoticeReference OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,noticeRef) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_NoticeReference'(?RT_BER:cindex(2,Val,noticeRef), [])
       end,

%%-------------------------------------------------
%% attribute number 2   External OCSP:DisplayText OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,explicitText) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_DisplayText'(?RT_BER:cindex(3,Val,explicitText), [])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_UserNotice'(Bytes, OptOrMand) ->
   'dec_UserNotice'(Bytes, OptOrMand, []).

'dec_UserNotice'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External OCSP:NoticeReference OPTIONAL
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<0:2,_:1,16:5,_/binary>> ->
'dec_NoticeReference'(Bytes2, opt_or_default, []);
_ ->
{ asn1_NOVALUE, Bytes2, 0 }
end,

%%-------------------------------------------------
%% attribute number 2   External OCSP:DisplayText OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case (catch 'dec_DisplayText'(Bytes3, opt_or_default, [])) of
{'EXIT',{error,{asn1,{no_optional_tag,_}}}} -> { asn1_NOVALUE, Bytes3, 0 };
Casetmp1-> Casetmp1
end,

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'UserNotice', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  NoticeReference
%%================================
'enc_NoticeReference'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External OCSP:DisplayText
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_DisplayText'(?RT_BER:cindex(2,Val,organization), []),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_NoticeReference_noticeNumbers'(?RT_BER:cindex(3,Val,noticeNumbers), []),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  NoticeReference_noticeNumbers
%%================================

'enc_NoticeReference_noticeNumbers'({'NoticeReference_noticeNumbers',Val}, TagIn) ->
   'enc_NoticeReference_noticeNumbers'(Val, TagIn);

'enc_NoticeReference_noticeNumbers'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_NoticeReference_noticeNumbers_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_NoticeReference_noticeNumbers_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_NoticeReference_noticeNumbers_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = ?RT_BER:encode_integer([], H, []),
   'enc_NoticeReference_noticeNumbers_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_NoticeReference_noticeNumbers'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun(FBytes,_,_)->
?RT_BER:decode_integer(FBytes,[],[], mandatory)
end, [], []).




'dec_NoticeReference'(Bytes, OptOrMand) ->
   'dec_NoticeReference'(Bytes, OptOrMand, []).

'dec_NoticeReference'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External OCSP:DisplayText
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_DisplayText'(Bytes2, mandatory, []),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE OF
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_NoticeReference_noticeNumbers'(Bytes3, mandatory, []),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'NoticeReference', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  DisplayText
%%================================

'enc_DisplayText'({'DisplayText',Val}, TagIn) ->
   'enc_DisplayText'(Val, TagIn);

'enc_DisplayText'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      ia5String ->
         ?RT_BER:encode_restricted_string([], element(2,Val), 22, []);
      visibleString ->
         ?RT_BER:encode_restricted_string([], element(2,Val), 26, []);
      bmpString ->
         ?RT_BER:encode_BMP_string([], element(2,Val), []);
      utf8String ->
         ?RT_BER:encode_UTF8_string([], element(2,Val), []);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).




'dec_DisplayText'(Bytes, OptOrMand) ->
   'dec_DisplayText'(Bytes, OptOrMand, []).

'dec_DisplayText'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'ia5String'
      <<0:2,_:1,22:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_restricted_string(Bytes1,{1,200},22,[], no_length, mandatory),
         {{ia5String, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'visibleString'
      <<0:2,_:1,26:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_restricted_string(Bytes1,{1,200},26,[], no_length, mandatory),
         {{visibleString, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'bmpString'
      <<0:2,_:1,30:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_BMP_string(Bytes1,{1,200},[], no_length, mandatory),
         {{bmpString, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'utf8String'
      <<0:2,_:1,12:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_UTF8_string(Bytes1,[], mandatory),
         {{utf8String, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


%%================================
%%  PolicyMappings
%%================================

'enc_PolicyMappings'({'PolicyMappings',Val}, TagIn) ->
   'enc_PolicyMappings'(Val, TagIn);

'enc_PolicyMappings'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_PolicyMappings_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_PolicyMappings_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_PolicyMappings_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_PolicyMappings_SEQOF'(H, []),
   'enc_PolicyMappings_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  PolicyMappings_SEQOF
%%================================
'enc_PolicyMappings_SEQOF'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1 with type OBJECT IDENTIFIER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_object_identifier(?RT_BER:cindex(2,Val,issuerDomainPolicy), []),

%%-------------------------------------------------
%% attribute number 2 with type OBJECT IDENTIFIER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_object_identifier(?RT_BER:cindex(3,Val,subjectDomainPolicy), []),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_PolicyMappings_SEQOF'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type OBJECT IDENTIFIER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_object_identifier(Bytes2,[], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type OBJECT IDENTIFIER
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_object_identifier(Bytes3,[], mandatory),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'PolicyMappings_SEQOF', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


'dec_PolicyMappings'(Bytes, OptOrMand) ->
   'dec_PolicyMappings'(Bytes, OptOrMand, []).

'dec_PolicyMappings'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_PolicyMappings_SEQOF'/3, [], []).




%%================================
%%  SubjectAltName
%%================================

'enc_SubjectAltName'({'SubjectAltName',Val}, TagIn) ->
   'enc_SubjectAltName'(Val, TagIn);

'enc_SubjectAltName'(Val, TagIn) ->
   'enc_GeneralNames'(Val, TagIn ++ []).


'dec_SubjectAltName'(Bytes, OptOrMand) ->
   'dec_SubjectAltName'(Bytes, OptOrMand, []).

'dec_SubjectAltName'(Bytes, OptOrMand, TagIn) ->
'dec_GeneralNames'(Bytes, OptOrMand, TagIn++[]).



%%================================
%%  GeneralNames
%%================================

'enc_GeneralNames'({'GeneralNames',Val}, TagIn) ->
   'enc_GeneralNames'(Val, TagIn);

'enc_GeneralNames'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_GeneralNames_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_GeneralNames_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_GeneralNames_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_GeneralName'(H, []),
   'enc_GeneralNames_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_GeneralNames'(Bytes, OptOrMand) ->
   'dec_GeneralNames'(Bytes, OptOrMand, []).

'dec_GeneralNames'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_GeneralName'/3, [], []).




%%================================
%%  GeneralName
%%================================

'enc_GeneralName'({'GeneralName',Val}, TagIn) ->
   'enc_GeneralName'(Val, TagIn);

'enc_GeneralName'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      otherName ->
         'enc_AnotherName'(element(2,Val), [{tag,128,0,'EXPLICIT',32}]);
      rfc822Name ->
         ?RT_BER:encode_restricted_string([], element(2,Val), 22, [{tag,128,1,'EXPLICIT',32}]);
      dNSName ->
         ?RT_BER:encode_restricted_string([], element(2,Val), 22, [{tag,128,2,'EXPLICIT',32}]);
      x400Address ->
         'enc_ORAddress'(element(2,Val), [{tag,128,3,'EXPLICIT',32}]);
      directoryName ->
         'enc_Name'(element(2,Val), [{tag,128,4,'EXPLICIT',32}]);
      ediPartyName ->
         'enc_EDIPartyName'(element(2,Val), [{tag,128,5,'EXPLICIT',32}]);
      uniformResourceIdentifier ->
         ?RT_BER:encode_restricted_string([], element(2,Val), 22, [{tag,128,6,'EXPLICIT',32}]);
      iPAddress ->
         ?RT_BER:encode_octet_string([], element(2,Val), [{tag,128,7,'EXPLICIT',32}]);
      registeredID ->
         ?RT_BER:encode_object_identifier(element(2,Val), [{tag,128,8,'EXPLICIT',32}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).




'dec_GeneralName'(Bytes, OptOrMand) ->
   'dec_GeneralName'(Bytes, OptOrMand, []).

'dec_GeneralName'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'otherName'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_AnotherName'(Bytes1, mandatory, [{tag,128,0,'EXPLICIT',32}]),
         {{otherName, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'rfc822Name'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_restricted_string(Bytes1,[],22,[{tag,128,1,'EXPLICIT',32}], no_length, mandatory),
         {{rfc822Name, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'dNSName'
      <<2:2,_:1,2:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_restricted_string(Bytes1,[],22,[{tag,128,2,'EXPLICIT',32}], no_length, mandatory),
         {{dNSName, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'x400Address'
      <<2:2,_:1,3:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_ORAddress'(Bytes1, mandatory, [{tag,128,3,'EXPLICIT',32}]),
         {{x400Address, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'directoryName'
      <<2:2,_:1,4:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_Name'(Bytes1, mandatory, [{tag,128,4,'EXPLICIT',32}]),
         {{directoryName, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'ediPartyName'
      <<2:2,_:1,5:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_EDIPartyName'(Bytes1, mandatory, [{tag,128,5,'EXPLICIT',32}]),
         {{ediPartyName, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'uniformResourceIdentifier'
      <<2:2,_:1,6:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_restricted_string(Bytes1,[],22,[{tag,128,6,'EXPLICIT',32}], no_length, mandatory),
         {{uniformResourceIdentifier, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'iPAddress'
      <<2:2,_:1,7:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_octet_string(Bytes1,[],[{tag,128,7,'EXPLICIT',32}], no_length, mandatory),
         {{iPAddress, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'registeredID'
      <<2:2,_:1,8:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_object_identifier(Bytes1,[{tag,128,8,'EXPLICIT',32}], mandatory),
         {{registeredID, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


%%================================
%%  AnotherName
%%================================
'enc_AnotherName'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type OBJECT IDENTIFIER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_object_identifier(?RT_BER:cindex(2,Val,'type-id'), []),

%%-------------------------------------------------
%% attribute number 2 with type ASN1_OPEN_TYPE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_open_type(?RT_BER:cindex(3,Val,value), [{tag,128,0,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_AnotherName'(Bytes, OptOrMand) ->
   'dec_AnotherName'(Bytes, OptOrMand, []).

'dec_AnotherName'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type OBJECT IDENTIFIER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_object_identifier(Bytes2,[], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type ASN1_OPEN_TYPE
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_open_type(ber_bin,Bytes3,[{tag,128,0,'EXPLICIT',32}]),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'AnotherName', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  EDIPartyName
%%================================
'enc_EDIPartyName'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External OCSP:DirectoryString OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,nameAssigner) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_DirectoryString'(?RT_BER:cindex(2,Val,nameAssigner), [{tag,128,0,'EXPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 2   External OCSP:DirectoryString
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_DirectoryString'(?RT_BER:cindex(3,Val,partyName), [{tag,128,1,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_EDIPartyName'(Bytes, OptOrMand) ->
   'dec_EDIPartyName'(Bytes, OptOrMand, []).

'dec_EDIPartyName'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External OCSP:DirectoryString OPTIONAL
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<2:2,_:1,0:5,_/binary>> ->
'dec_DirectoryString'(Bytes2, opt_or_default, [{tag,128,0,'EXPLICIT',32}]);
_ ->
{ asn1_NOVALUE, Bytes2, 0 }
end,

%%-------------------------------------------------
%% attribute number 2   External OCSP:DirectoryString
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_DirectoryString'(Bytes3, mandatory, [{tag,128,1,'EXPLICIT',32}]),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'EDIPartyName', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  IssuerAltName
%%================================

'enc_IssuerAltName'({'IssuerAltName',Val}, TagIn) ->
   'enc_IssuerAltName'(Val, TagIn);

'enc_IssuerAltName'(Val, TagIn) ->
   'enc_GeneralNames'(Val, TagIn ++ []).


'dec_IssuerAltName'(Bytes, OptOrMand) ->
   'dec_IssuerAltName'(Bytes, OptOrMand, []).

'dec_IssuerAltName'(Bytes, OptOrMand, TagIn) ->
'dec_GeneralNames'(Bytes, OptOrMand, TagIn++[]).



%%================================
%%  SubjectDirectoryAttributes
%%================================

'enc_SubjectDirectoryAttributes'({'SubjectDirectoryAttributes',Val}, TagIn) ->
   'enc_SubjectDirectoryAttributes'(Val, TagIn);

'enc_SubjectDirectoryAttributes'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_SubjectDirectoryAttributes_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_SubjectDirectoryAttributes_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SubjectDirectoryAttributes_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_Attribute'(H, []),
   'enc_SubjectDirectoryAttributes_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_SubjectDirectoryAttributes'(Bytes, OptOrMand) ->
   'dec_SubjectDirectoryAttributes'(Bytes, OptOrMand, []).

'dec_SubjectDirectoryAttributes'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_Attribute'/3, [], []).




%%================================
%%  BasicConstraints
%%================================
'enc_BasicConstraints'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type BOOLEAN DEFAULT = false
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case catch asn1rt_check:check_bool(false, ?RT_BER:cindex(2,Val,cA)) of
            true -> {[],0};
         _ ->
            ?RT_BER:encode_boolean(?RT_BER:cindex(2,Val,cA), [])
       end,

%%-------------------------------------------------
%% attribute number 2 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,pathLenConstraint) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,pathLenConstraint), [])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_BasicConstraints'(Bytes, OptOrMand) ->
   'dec_BasicConstraints'(Bytes, OptOrMand, []).

'dec_BasicConstraints'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type BOOLEAN DEFAULT = false
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<0:2,_:1,1:5,_/binary>> ->
?RT_BER:decode_boolean(Bytes2,[], mandatory);
_ ->
{false,Bytes2, 0 }
end,

%%-------------------------------------------------
%% attribute number 2 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<0:2,_:1,2:5,_/binary>> ->
?RT_BER:decode_integer(Bytes3,{0,'MAX'},[], mandatory);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'BasicConstraints', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  NameConstraints
%%================================
'enc_NameConstraints'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External OCSP:GeneralSubtrees OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,permittedSubtrees) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_GeneralSubtrees'(?RT_BER:cindex(2,Val,permittedSubtrees), [{tag,128,0,'EXPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 2   External OCSP:GeneralSubtrees OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,excludedSubtrees) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_GeneralSubtrees'(?RT_BER:cindex(3,Val,excludedSubtrees), [{tag,128,1,'EXPLICIT',32}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_NameConstraints'(Bytes, OptOrMand) ->
   'dec_NameConstraints'(Bytes, OptOrMand, []).

'dec_NameConstraints'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External OCSP:GeneralSubtrees OPTIONAL
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<2:2,_:1,0:5,_/binary>> ->
'dec_GeneralSubtrees'(Bytes2, opt_or_default, [{tag,128,0,'EXPLICIT',32}]);
_ ->
{ asn1_NOVALUE, Bytes2, 0 }
end,

%%-------------------------------------------------
%% attribute number 2   External OCSP:GeneralSubtrees OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
'dec_GeneralSubtrees'(Bytes3, opt_or_default, [{tag,128,1,'EXPLICIT',32}]);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'NameConstraints', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  GeneralSubtrees
%%================================

'enc_GeneralSubtrees'({'GeneralSubtrees',Val}, TagIn) ->
   'enc_GeneralSubtrees'(Val, TagIn);

'enc_GeneralSubtrees'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_GeneralSubtrees_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_GeneralSubtrees_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_GeneralSubtrees_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_GeneralSubtree'(H, []),
   'enc_GeneralSubtrees_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_GeneralSubtrees'(Bytes, OptOrMand) ->
   'dec_GeneralSubtrees'(Bytes, OptOrMand, []).

'dec_GeneralSubtrees'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_GeneralSubtree'/3, [], []).




%%================================
%%  GeneralSubtree
%%================================
'enc_GeneralSubtree'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External OCSP:GeneralName
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_GeneralName'(?RT_BER:cindex(2,Val,base), []),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER DEFAULT = 0
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case catch asn1rt_check:check_int(0, ?RT_BER:cindex(3,Val,minimum), []) of
            true -> {[],0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,minimum), [{tag,128,0,'EXPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 3 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,maximum) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(4,Val,maximum), [{tag,128,1,'EXPLICIT',32}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_GeneralSubtree'(Bytes, OptOrMand) ->
   'dec_GeneralSubtree'(Bytes, OptOrMand, []).

'dec_GeneralSubtree'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External OCSP:GeneralName
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_GeneralName'(Bytes2, mandatory, []),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER DEFAULT = 0
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,0:5,_/binary>> ->
?RT_BER:decode_integer(Bytes3,{0,'MAX'},[{tag,128,0,'EXPLICIT',32}], mandatory);
_ ->
{0,Bytes3, 0 }
end,

%%-------------------------------------------------
%% attribute number 3 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = case Bytes4 of
<<2:2,_:1,1:5,_/binary>> ->
?RT_BER:decode_integer(Bytes4,{0,'MAX'},[{tag,128,1,'EXPLICIT',32}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes4, 0 }
end,

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'GeneralSubtree', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.


%%================================
%%  BaseDistance
%%================================

'enc_BaseDistance'({'BaseDistance',Val}, TagIn) ->
   'enc_BaseDistance'(Val, TagIn);

'enc_BaseDistance'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, TagIn ++ []).


'dec_BaseDistance'(Bytes, OptOrMand) ->
   'dec_BaseDistance'(Bytes, OptOrMand, []).

'dec_BaseDistance'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_integer(Bytes,{0,'MAX'},TagIn++[], OptOrMand).



%%================================
%%  PolicyConstraints
%%================================
'enc_PolicyConstraints'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,requireExplicitPolicy) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,requireExplicitPolicy), [{tag,128,0,'EXPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 2 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,inhibitPolicyMapping) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,inhibitPolicyMapping), [{tag,128,1,'EXPLICIT',32}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_PolicyConstraints'(Bytes, OptOrMand) ->
   'dec_PolicyConstraints'(Bytes, OptOrMand, []).

'dec_PolicyConstraints'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<2:2,_:1,0:5,_/binary>> ->
?RT_BER:decode_integer(Bytes2,{0,'MAX'},[{tag,128,0,'EXPLICIT',32}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes2, 0 }
end,

%%-------------------------------------------------
%% attribute number 2 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
?RT_BER:decode_integer(Bytes3,{0,'MAX'},[{tag,128,1,'EXPLICIT',32}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'PolicyConstraints', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  SkipCerts
%%================================

'enc_SkipCerts'({'SkipCerts',Val}, TagIn) ->
   'enc_SkipCerts'(Val, TagIn);

'enc_SkipCerts'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, TagIn ++ []).


'dec_SkipCerts'(Bytes, OptOrMand) ->
   'dec_SkipCerts'(Bytes, OptOrMand, []).

'dec_SkipCerts'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_integer(Bytes,{0,'MAX'},TagIn++[], OptOrMand).



%%================================
%%  CRLDistributionPoints
%%================================

'enc_CRLDistributionPoints'({'CRLDistributionPoints',Val}, TagIn) ->
   'enc_CRLDistributionPoints'(Val, TagIn);

'enc_CRLDistributionPoints'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_CRLDistributionPoints_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_CRLDistributionPoints_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_CRLDistributionPoints_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_DistributionPoint'(H, []),
   'enc_CRLDistributionPoints_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_CRLDistributionPoints'(Bytes, OptOrMand) ->
   'dec_CRLDistributionPoints'(Bytes, OptOrMand, []).

'dec_CRLDistributionPoints'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_DistributionPoint'/3, [], []).




%%================================
%%  DistributionPoint
%%================================
'enc_DistributionPoint'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External OCSP:DistributionPointName OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,distributionPoint) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_DistributionPointName'(?RT_BER:cindex(2,Val,distributionPoint), [{tag,128,0,'EXPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 2 with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,reasons) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_bit_string([], ?RT_BER:cindex(3,Val,reasons), [{unused,0},{keyCompromise,1},{cACompromise,2},{affiliationChanged,3},{superseded,4},{cessationOfOperation,5},{certificateHold,6},{privilegeWithdrawn,7},{aACompromise,8}], [{tag,128,1,'EXPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 3   External OCSP:GeneralNames OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,cRLIssuer) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_GeneralNames'(?RT_BER:cindex(4,Val,cRLIssuer), [{tag,128,2,'EXPLICIT',32}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_DistributionPoint'(Bytes, OptOrMand) ->
   'dec_DistributionPoint'(Bytes, OptOrMand, []).

'dec_DistributionPoint'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External OCSP:DistributionPointName OPTIONAL
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<2:2,_:1,0:5,_/binary>> ->
'dec_DistributionPointName'(Bytes2, opt_or_default, [{tag,128,0,'EXPLICIT',32}]);
_ ->
{ asn1_NOVALUE, Bytes2, 0 }
end,

%%-------------------------------------------------
%% attribute number 2 with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
?RT_BER:decode_bit_string(Bytes3,[],[{unused,0},{keyCompromise,1},{cACompromise,2},{affiliationChanged,3},{superseded,4},{cessationOfOperation,5},{certificateHold,6},{privilegeWithdrawn,7},{aACompromise,8}],[{tag,128,1,'EXPLICIT',32}], no_length, mandatory);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

%%-------------------------------------------------
%% attribute number 3   External OCSP:GeneralNames OPTIONAL
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = case Bytes4 of
<<2:2,_:1,2:5,_/binary>> ->
'dec_GeneralNames'(Bytes4, opt_or_default, [{tag,128,2,'EXPLICIT',32}]);
_ ->
{ asn1_NOVALUE, Bytes4, 0 }
end,

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'DistributionPoint', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.


%%================================
%%  DistributionPointName
%%================================

'enc_DistributionPointName'({'DistributionPointName',Val}, TagIn) ->
   'enc_DistributionPointName'(Val, TagIn);

'enc_DistributionPointName'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      fullName ->
         'enc_GeneralNames'(element(2,Val), [{tag,128,0,'EXPLICIT',32}]);
      nameRelativeToCRLIssuer ->
         'enc_RelativeDistinguishedName'(element(2,Val), [{tag,128,1,'EXPLICIT',32}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).




'dec_DistributionPointName'(Bytes, OptOrMand) ->
   'dec_DistributionPointName'(Bytes, OptOrMand, []).

'dec_DistributionPointName'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'fullName'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_GeneralNames'(Bytes1, mandatory, [{tag,128,0,'EXPLICIT',32}]),
         {{fullName, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'nameRelativeToCRLIssuer'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_RelativeDistinguishedName'(Bytes1, mandatory, [{tag,128,1,'EXPLICIT',32}]),
         {{nameRelativeToCRLIssuer, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


%%================================
%%  ReasonFlags
%%================================

'enc_ReasonFlags'({'ReasonFlags',Val}, TagIn) ->
   'enc_ReasonFlags'(Val, TagIn);

'enc_ReasonFlags'(Val, TagIn) ->
?RT_BER:encode_bit_string([], Val, [{unused,0},{keyCompromise,1},{cACompromise,2},{affiliationChanged,3},{superseded,4},{cessationOfOperation,5},{certificateHold,6},{privilegeWithdrawn,7},{aACompromise,8}], TagIn ++ []).


'dec_ReasonFlags'(Bytes, OptOrMand) ->
   'dec_ReasonFlags'(Bytes, OptOrMand, []).

'dec_ReasonFlags'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_bit_string(Bytes,[],[{unused,0},{keyCompromise,1},{cACompromise,2},{affiliationChanged,3},{superseded,4},{cessationOfOperation,5},{certificateHold,6},{privilegeWithdrawn,7},{aACompromise,8}],TagIn++[], no_length, OptOrMand).



%%================================
%%  ExtKeyUsageSyntax
%%================================

'enc_ExtKeyUsageSyntax'({'ExtKeyUsageSyntax',Val}, TagIn) ->
   'enc_ExtKeyUsageSyntax'(Val, TagIn);

'enc_ExtKeyUsageSyntax'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_ExtKeyUsageSyntax_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_ExtKeyUsageSyntax_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ExtKeyUsageSyntax_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = ?RT_BER:encode_object_identifier(H, []),
   'enc_ExtKeyUsageSyntax_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_ExtKeyUsageSyntax'(Bytes, OptOrMand) ->
   'dec_ExtKeyUsageSyntax'(Bytes, OptOrMand, []).

'dec_ExtKeyUsageSyntax'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun(FBytes,_,_)->
?RT_BER:decode_object_identifier(FBytes,[], mandatory)
end, [], []).




%%================================
%%  KeyPurposeId
%%================================

'enc_KeyPurposeId'({'KeyPurposeId',Val}, TagIn) ->
   'enc_KeyPurposeId'(Val, TagIn);

'enc_KeyPurposeId'(Val, TagIn) ->
?RT_BER:encode_object_identifier(Val, TagIn ++ []).


'dec_KeyPurposeId'(Bytes, OptOrMand) ->
   'dec_KeyPurposeId'(Bytes, OptOrMand, []).

'dec_KeyPurposeId'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_object_identifier(Bytes,TagIn++[], OptOrMand).



%%================================
%%  InhibitAnyPolicy
%%================================

'enc_InhibitAnyPolicy'({'InhibitAnyPolicy',Val}, TagIn) ->
   'enc_InhibitAnyPolicy'(Val, TagIn);

'enc_InhibitAnyPolicy'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, TagIn ++ []).


'dec_InhibitAnyPolicy'(Bytes, OptOrMand) ->
   'dec_InhibitAnyPolicy'(Bytes, OptOrMand, []).

'dec_InhibitAnyPolicy'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_integer(Bytes,{0,'MAX'},TagIn++[], OptOrMand).



%%================================
%%  FreshestCRL
%%================================

'enc_FreshestCRL'({'FreshestCRL',Val}, TagIn) ->
   'enc_FreshestCRL'(Val, TagIn);

'enc_FreshestCRL'(Val, TagIn) ->
   'enc_CRLDistributionPoints'(Val, TagIn ++ []).


'dec_FreshestCRL'(Bytes, OptOrMand) ->
   'dec_FreshestCRL'(Bytes, OptOrMand, []).

'dec_FreshestCRL'(Bytes, OptOrMand, TagIn) ->
'dec_CRLDistributionPoints'(Bytes, OptOrMand, TagIn++[]).



%%================================
%%  AuthorityInfoAccessSyntax
%%================================

'enc_AuthorityInfoAccessSyntax'({'AuthorityInfoAccessSyntax',Val}, TagIn) ->
   'enc_AuthorityInfoAccessSyntax'(Val, TagIn);

'enc_AuthorityInfoAccessSyntax'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_AuthorityInfoAccessSyntax_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_AuthorityInfoAccessSyntax_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_AuthorityInfoAccessSyntax_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_AccessDescription'(H, []),
   'enc_AuthorityInfoAccessSyntax_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_AuthorityInfoAccessSyntax'(Bytes, OptOrMand) ->
   'dec_AuthorityInfoAccessSyntax'(Bytes, OptOrMand, []).

'dec_AuthorityInfoAccessSyntax'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_AccessDescription'/3, [], []).




%%================================
%%  AccessDescription
%%================================
'enc_AccessDescription'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type OBJECT IDENTIFIER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_object_identifier(?RT_BER:cindex(2,Val,accessMethod), []),

%%-------------------------------------------------
%% attribute number 2   External OCSP:GeneralName
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_GeneralName'(?RT_BER:cindex(3,Val,accessLocation), []),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_AccessDescription'(Bytes, OptOrMand) ->
   'dec_AccessDescription'(Bytes, OptOrMand, []).

'dec_AccessDescription'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type OBJECT IDENTIFIER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_object_identifier(Bytes2,[], mandatory),

%%-------------------------------------------------
%% attribute number 2   External OCSP:GeneralName
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_GeneralName'(Bytes3, mandatory, []),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'AccessDescription', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  SubjectInfoAccessSyntax
%%================================

'enc_SubjectInfoAccessSyntax'({'SubjectInfoAccessSyntax',Val}, TagIn) ->
   'enc_SubjectInfoAccessSyntax'(Val, TagIn);

'enc_SubjectInfoAccessSyntax'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_SubjectInfoAccessSyntax_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_SubjectInfoAccessSyntax_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SubjectInfoAccessSyntax_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_AccessDescription'(H, []),
   'enc_SubjectInfoAccessSyntax_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_SubjectInfoAccessSyntax'(Bytes, OptOrMand) ->
   'dec_SubjectInfoAccessSyntax'(Bytes, OptOrMand, []).

'dec_SubjectInfoAccessSyntax'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_AccessDescription'/3, [], []).




%%================================
%%  CRLNumber
%%================================

'enc_CRLNumber'({'CRLNumber',Val}, TagIn) ->
   'enc_CRLNumber'(Val, TagIn);

'enc_CRLNumber'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, TagIn ++ []).


'dec_CRLNumber'(Bytes, OptOrMand) ->
   'dec_CRLNumber'(Bytes, OptOrMand, []).

'dec_CRLNumber'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_integer(Bytes,{0,'MAX'},TagIn++[], OptOrMand).



%%================================
%%  IssuingDistributionPoint
%%================================
'enc_IssuingDistributionPoint'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External OCSP:DistributionPointName OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,distributionPoint) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_DistributionPointName'(?RT_BER:cindex(2,Val,distributionPoint), [{tag,128,0,'EXPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 2 with type BOOLEAN DEFAULT = false
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case catch asn1rt_check:check_bool(false, ?RT_BER:cindex(3,Val,onlyContainsUserCerts)) of
            true -> {[],0};
         _ ->
            ?RT_BER:encode_boolean(?RT_BER:cindex(3,Val,onlyContainsUserCerts), [{tag,128,1,'EXPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 3 with type BOOLEAN DEFAULT = false
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case catch asn1rt_check:check_bool(false, ?RT_BER:cindex(4,Val,onlyContainsCACerts)) of
            true -> {[],0};
         _ ->
            ?RT_BER:encode_boolean(?RT_BER:cindex(4,Val,onlyContainsCACerts), [{tag,128,2,'EXPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 4 with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case ?RT_BER:cindex(5,Val,onlySomeReasons) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_bit_string([], ?RT_BER:cindex(5,Val,onlySomeReasons), [{unused,0},{keyCompromise,1},{cACompromise,2},{affiliationChanged,3},{superseded,4},{cessationOfOperation,5},{certificateHold,6},{privilegeWithdrawn,7},{aACompromise,8}], [{tag,128,3,'EXPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 5 with type BOOLEAN DEFAULT = false
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case catch asn1rt_check:check_bool(false, ?RT_BER:cindex(6,Val,indirectCRL)) of
            true -> {[],0};
         _ ->
            ?RT_BER:encode_boolean(?RT_BER:cindex(6,Val,indirectCRL), [{tag,128,4,'EXPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 6 with type BOOLEAN DEFAULT = false
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case catch asn1rt_check:check_bool(false, ?RT_BER:cindex(7,Val,onlyContainsAttributeCerts)) of
            true -> {[],0};
         _ ->
            ?RT_BER:encode_boolean(?RT_BER:cindex(7,Val,onlyContainsAttributeCerts), [{tag,128,5,'EXPLICIT',32}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_IssuingDistributionPoint'(Bytes, OptOrMand) ->
   'dec_IssuingDistributionPoint'(Bytes, OptOrMand, []).

'dec_IssuingDistributionPoint'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External OCSP:DistributionPointName OPTIONAL
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<2:2,_:1,0:5,_/binary>> ->
'dec_DistributionPointName'(Bytes2, opt_or_default, [{tag,128,0,'EXPLICIT',32}]);
_ ->
{ asn1_NOVALUE, Bytes2, 0 }
end,

%%-------------------------------------------------
%% attribute number 2 with type BOOLEAN DEFAULT = false
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
?RT_BER:decode_boolean(Bytes3,[{tag,128,1,'EXPLICIT',32}], mandatory);
_ ->
{false,Bytes3, 0 }
end,

%%-------------------------------------------------
%% attribute number 3 with type BOOLEAN DEFAULT = false
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = case Bytes4 of
<<2:2,_:1,2:5,_/binary>> ->
?RT_BER:decode_boolean(Bytes4,[{tag,128,2,'EXPLICIT',32}], mandatory);
_ ->
{false,Bytes4, 0 }
end,

%%-------------------------------------------------
%% attribute number 4 with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = case Bytes5 of
<<2:2,_:1,3:5,_/binary>> ->
?RT_BER:decode_bit_string(Bytes5,[],[{unused,0},{keyCompromise,1},{cACompromise,2},{affiliationChanged,3},{superseded,4},{cessationOfOperation,5},{certificateHold,6},{privilegeWithdrawn,7},{aACompromise,8}],[{tag,128,3,'EXPLICIT',32}], no_length, mandatory);
_ ->
{ asn1_NOVALUE, Bytes5, 0 }
end,

%%-------------------------------------------------
%% attribute number 5 with type BOOLEAN DEFAULT = false
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = case Bytes6 of
<<2:2,_:1,4:5,_/binary>> ->
?RT_BER:decode_boolean(Bytes6,[{tag,128,4,'EXPLICIT',32}], mandatory);
_ ->
{false,Bytes6, 0 }
end,

%%-------------------------------------------------
%% attribute number 6 with type BOOLEAN DEFAULT = false
%%-------------------------------------------------
   {Term6,Bytes8,Rb7} = case Bytes7 of
<<2:2,_:1,5:5,_/binary>> ->
?RT_BER:decode_boolean(Bytes7,[{tag,128,5,'EXPLICIT',32}], mandatory);
_ ->
{false,Bytes7, 0 }
end,

   {Bytes9,Rb8} = ?RT_BER:restbytes2(RemBytes, Bytes8,noext),
   {{'IssuingDistributionPoint', Term1, Term2, Term3, Term4, Term5, Term6}, Bytes9, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7+Rb8}.


%%================================
%%  BaseCRLNumber
%%================================

'enc_BaseCRLNumber'({'BaseCRLNumber',Val}, TagIn) ->
   'enc_BaseCRLNumber'(Val, TagIn);

'enc_BaseCRLNumber'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, TagIn ++ []).


'dec_BaseCRLNumber'(Bytes, OptOrMand) ->
   'dec_BaseCRLNumber'(Bytes, OptOrMand, []).

'dec_BaseCRLNumber'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_integer(Bytes,{0,'MAX'},TagIn++[], OptOrMand).



%%================================
%%  CRLReason
%%================================

'enc_CRLReason'({'CRLReason',Val}, TagIn) ->
   'enc_CRLReason'(Val, TagIn);

'enc_CRLReason'(Val, TagIn) ->
case (case Val of {_,Enumval1}->Enumval1;_->Val end) of
unspecified -> ?RT_BER:encode_enumerated(0,TagIn ++ []);
keyCompromise -> ?RT_BER:encode_enumerated(1,TagIn ++ []);
cACompromise -> ?RT_BER:encode_enumerated(2,TagIn ++ []);
affiliationChanged -> ?RT_BER:encode_enumerated(3,TagIn ++ []);
superseded -> ?RT_BER:encode_enumerated(4,TagIn ++ []);
cessationOfOperation -> ?RT_BER:encode_enumerated(5,TagIn ++ []);
certificateHold -> ?RT_BER:encode_enumerated(6,TagIn ++ []);
removeFromCRL -> ?RT_BER:encode_enumerated(8,TagIn ++ []);
privilegeWithdrawn -> ?RT_BER:encode_enumerated(9,TagIn ++ []);
aACompromise -> ?RT_BER:encode_enumerated(10,TagIn ++ []);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end.


'dec_CRLReason'(Bytes, OptOrMand) ->
   'dec_CRLReason'(Bytes, OptOrMand, []).

'dec_CRLReason'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_enumerated(Bytes,[],[{unspecified,0},{keyCompromise,1},{cACompromise,2},{affiliationChanged,3},{superseded,4},{cessationOfOperation,5},{certificateHold,6},{removeFromCRL,8},{privilegeWithdrawn,9},{aACompromise,10}],TagIn++[], OptOrMand).



%%================================
%%  CertificateIssuer
%%================================

'enc_CertificateIssuer'({'CertificateIssuer',Val}, TagIn) ->
   'enc_CertificateIssuer'(Val, TagIn);

'enc_CertificateIssuer'(Val, TagIn) ->
   'enc_GeneralNames'(Val, TagIn ++ []).


'dec_CertificateIssuer'(Bytes, OptOrMand) ->
   'dec_CertificateIssuer'(Bytes, OptOrMand, []).

'dec_CertificateIssuer'(Bytes, OptOrMand, TagIn) ->
'dec_GeneralNames'(Bytes, OptOrMand, TagIn++[]).



%%================================
%%  HoldInstructionCode
%%================================

'enc_HoldInstructionCode'({'HoldInstructionCode',Val}, TagIn) ->
   'enc_HoldInstructionCode'(Val, TagIn);

'enc_HoldInstructionCode'(Val, TagIn) ->
?RT_BER:encode_object_identifier(Val, TagIn ++ []).


'dec_HoldInstructionCode'(Bytes, OptOrMand) ->
   'dec_HoldInstructionCode'(Bytes, OptOrMand, []).

'dec_HoldInstructionCode'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_object_identifier(Bytes,TagIn++[], OptOrMand).



%%================================
%%  InvalidityDate
%%================================

'enc_InvalidityDate'({'InvalidityDate',Val}, TagIn) ->
   'enc_InvalidityDate'(Val, TagIn);

'enc_InvalidityDate'(Val, TagIn) ->
?RT_BER:encode_generalized_time([], Val, TagIn ++ []).


'dec_InvalidityDate'(Bytes, OptOrMand) ->
   'dec_InvalidityDate'(Bytes, OptOrMand, []).

'dec_InvalidityDate'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_generalized_time(Bytes,[],TagIn++[], no_length, OptOrMand).



%%================================
%%  Attribute
%%================================
'enc_Attribute'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type OBJECT IDENTIFIER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_object_identifier(?RT_BER:cindex(2,Val,type), []),

%%-------------------------------------------------
%% attribute number 2 with type SET OF
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_Attribute_values'(?RT_BER:cindex(3,Val,values), []),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  Attribute_values
%%================================

'enc_Attribute_values'({'Attribute_values',Val}, TagIn) ->
   'enc_Attribute_values'(Val, TagIn);

'enc_Attribute_values'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_Attribute_values_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,17,'IMPLICIT',32}], EncBytes, EncLen).

'enc_Attribute_values_components'([], AccBytes, AccLen) -> 
   {asn1rt_check:dynamicsort_SETOF(AccBytes),AccLen};

'enc_Attribute_values_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_AttributeValue'(H, []),
   'enc_Attribute_values_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_Attribute_values'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,17,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_AttributeValue'/3, [], []).




'dec_Attribute'(Bytes, OptOrMand) ->
   'dec_Attribute'(Bytes, OptOrMand, []).

'dec_Attribute'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type OBJECT IDENTIFIER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_object_identifier(Bytes2,[], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type SET OF
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_Attribute_values'(Bytes3, mandatory, []),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'Attribute', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  AttributeType
%%================================

'enc_AttributeType'({'AttributeType',Val}, TagIn) ->
   'enc_AttributeType'(Val, TagIn);

'enc_AttributeType'(Val, TagIn) ->
?RT_BER:encode_object_identifier(Val, TagIn ++ []).


'dec_AttributeType'(Bytes, OptOrMand) ->
   'dec_AttributeType'(Bytes, OptOrMand, []).

'dec_AttributeType'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_object_identifier(Bytes,TagIn++[], OptOrMand).



%%================================
%%  AttributeValue
%%================================

'enc_AttributeValue'({'AttributeValue',Val}, TagIn) ->
   'enc_AttributeValue'(Val, TagIn);

'enc_AttributeValue'(Val, TagIn) ->
%% OPEN TYPE
?RT_BER:encode_open_type(Val, TagIn ++ []).


'dec_AttributeValue'(Bytes, OptOrMand) ->
   'dec_AttributeValue'(Bytes, OptOrMand, []).

'dec_AttributeValue'(Bytes, _OptOrMand, TagIn) ->
?RT_BER:decode_open_type(ber_bin,Bytes,TagIn++[]).



%%================================
%%  AttributeTypeAndValue
%%================================
'enc_AttributeTypeAndValue'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type OBJECT IDENTIFIER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_object_identifier(?RT_BER:cindex(2,Val,type), []),

%%-------------------------------------------------
%% attribute number 2   External OCSP:AttributeValue
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_AttributeValue'(?RT_BER:cindex(3,Val,value), []),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_AttributeTypeAndValue'(Bytes, OptOrMand) ->
   'dec_AttributeTypeAndValue'(Bytes, OptOrMand, []).

'dec_AttributeTypeAndValue'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type OBJECT IDENTIFIER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_object_identifier(Bytes2,[], mandatory),

%%-------------------------------------------------
%% attribute number 2   External OCSP:AttributeValue
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_AttributeValue'(Bytes3, mandatory, []),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'AttributeTypeAndValue', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  X520name
%%================================

'enc_X520name'({'X520name',Val}, TagIn) ->
   'enc_X520name'(Val, TagIn);

'enc_X520name'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      teletexString ->
         ?RT_BER:encode_restricted_string([], element(2,Val), 20, []);
      printableString ->
         ?RT_BER:encode_restricted_string([], element(2,Val), 19, []);
      universalString ->
         ?RT_BER:encode_universal_string([], element(2,Val), []);
      utf8String ->
         ?RT_BER:encode_UTF8_string([], element(2,Val), []);
      bmpString ->
         ?RT_BER:encode_BMP_string([], element(2,Val), []);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).




'dec_X520name'(Bytes, OptOrMand) ->
   'dec_X520name'(Bytes, OptOrMand, []).

'dec_X520name'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'teletexString'
      <<0:2,_:1,20:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_restricted_string(Bytes1,{1,32768},20,[], no_length, mandatory),
         {{teletexString, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'printableString'
      <<0:2,_:1,19:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_restricted_string(Bytes1,{1,32768},19,[], no_length, mandatory),
         {{printableString, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'universalString'
      <<0:2,_:1,28:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_universal_string(Bytes1,{1,32768},[], no_length, mandatory),
         {{universalString, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'utf8String'
      <<0:2,_:1,12:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_UTF8_string(Bytes1,[], mandatory),
         {{utf8String, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'bmpString'
      <<0:2,_:1,30:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_BMP_string(Bytes1,{1,32768},[], no_length, mandatory),
         {{bmpString, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


%%================================
%%  X520CommonName
%%================================

'enc_X520CommonName'({'X520CommonName',Val}, TagIn) ->
   'enc_X520CommonName'(Val, TagIn);

'enc_X520CommonName'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      teletexString ->
         ?RT_BER:encode_restricted_string([], element(2,Val), 20, []);
      printableString ->
         ?RT_BER:encode_restricted_string([], element(2,Val), 19, []);
      universalString ->
         ?RT_BER:encode_universal_string([], element(2,Val), []);
      utf8String ->
         ?RT_BER:encode_UTF8_string([], element(2,Val), []);
      bmpString ->
         ?RT_BER:encode_BMP_string([], element(2,Val), []);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).




'dec_X520CommonName'(Bytes, OptOrMand) ->
   'dec_X520CommonName'(Bytes, OptOrMand, []).

'dec_X520CommonName'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'teletexString'
      <<0:2,_:1,20:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_restricted_string(Bytes1,{1,64},20,[], no_length, mandatory),
         {{teletexString, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'printableString'
      <<0:2,_:1,19:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_restricted_string(Bytes1,{1,64},19,[], no_length, mandatory),
         {{printableString, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'universalString'
      <<0:2,_:1,28:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_universal_string(Bytes1,{1,64},[], no_length, mandatory),
         {{universalString, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'utf8String'
      <<0:2,_:1,12:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_UTF8_string(Bytes1,[], mandatory),
         {{utf8String, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'bmpString'
      <<0:2,_:1,30:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_BMP_string(Bytes1,{1,64},[], no_length, mandatory),
         {{bmpString, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


%%================================
%%  X520LocalityName
%%================================

'enc_X520LocalityName'({'X520LocalityName',Val}, TagIn) ->
   'enc_X520LocalityName'(Val, TagIn);

'enc_X520LocalityName'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      teletexString ->
         ?RT_BER:encode_restricted_string([], element(2,Val), 20, []);
      printableString ->
         ?RT_BER:encode_restricted_string([], element(2,Val), 19, []);
      universalString ->
         ?RT_BER:encode_universal_string([], element(2,Val), []);
      utf8String ->
         ?RT_BER:encode_UTF8_string([], element(2,Val), []);
      bmpString ->
         ?RT_BER:encode_BMP_string([], element(2,Val), []);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).




'dec_X520LocalityName'(Bytes, OptOrMand) ->
   'dec_X520LocalityName'(Bytes, OptOrMand, []).

'dec_X520LocalityName'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'teletexString'
      <<0:2,_:1,20:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_restricted_string(Bytes1,{1,128},20,[], no_length, mandatory),
         {{teletexString, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'printableString'
      <<0:2,_:1,19:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_restricted_string(Bytes1,{1,128},19,[], no_length, mandatory),
         {{printableString, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'universalString'
      <<0:2,_:1,28:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_universal_string(Bytes1,{1,128},[], no_length, mandatory),
         {{universalString, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'utf8String'
      <<0:2,_:1,12:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_UTF8_string(Bytes1,[], mandatory),
         {{utf8String, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'bmpString'
      <<0:2,_:1,30:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_BMP_string(Bytes1,{1,128},[], no_length, mandatory),
         {{bmpString, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


%%================================
%%  X520StateOrProvinceName
%%================================

'enc_X520StateOrProvinceName'({'X520StateOrProvinceName',Val}, TagIn) ->
   'enc_X520StateOrProvinceName'(Val, TagIn);

'enc_X520StateOrProvinceName'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      teletexString ->
         ?RT_BER:encode_restricted_string([], element(2,Val), 20, []);
      printableString ->
         ?RT_BER:encode_restricted_string([], element(2,Val), 19, []);
      universalString ->
         ?RT_BER:encode_universal_string([], element(2,Val), []);
      utf8String ->
         ?RT_BER:encode_UTF8_string([], element(2,Val), []);
      bmpString ->
         ?RT_BER:encode_BMP_string([], element(2,Val), []);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).




'dec_X520StateOrProvinceName'(Bytes, OptOrMand) ->
   'dec_X520StateOrProvinceName'(Bytes, OptOrMand, []).

'dec_X520StateOrProvinceName'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'teletexString'
      <<0:2,_:1,20:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_restricted_string(Bytes1,{1,128},20,[], no_length, mandatory),
         {{teletexString, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'printableString'
      <<0:2,_:1,19:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_restricted_string(Bytes1,{1,128},19,[], no_length, mandatory),
         {{printableString, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'universalString'
      <<0:2,_:1,28:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_universal_string(Bytes1,{1,128},[], no_length, mandatory),
         {{universalString, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'utf8String'
      <<0:2,_:1,12:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_UTF8_string(Bytes1,[], mandatory),
         {{utf8String, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'bmpString'
      <<0:2,_:1,30:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_BMP_string(Bytes1,{1,128},[], no_length, mandatory),
         {{bmpString, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


%%================================
%%  X520OrganizationName
%%================================

'enc_X520OrganizationName'({'X520OrganizationName',Val}, TagIn) ->
   'enc_X520OrganizationName'(Val, TagIn);

'enc_X520OrganizationName'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      teletexString ->
         ?RT_BER:encode_restricted_string([], element(2,Val), 20, []);
      printableString ->
         ?RT_BER:encode_restricted_string([], element(2,Val), 19, []);
      universalString ->
         ?RT_BER:encode_universal_string([], element(2,Val), []);
      utf8String ->
         ?RT_BER:encode_UTF8_string([], element(2,Val), []);
      bmpString ->
         ?RT_BER:encode_BMP_string([], element(2,Val), []);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).




'dec_X520OrganizationName'(Bytes, OptOrMand) ->
   'dec_X520OrganizationName'(Bytes, OptOrMand, []).

'dec_X520OrganizationName'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'teletexString'
      <<0:2,_:1,20:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_restricted_string(Bytes1,{1,64},20,[], no_length, mandatory),
         {{teletexString, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'printableString'
      <<0:2,_:1,19:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_restricted_string(Bytes1,{1,64},19,[], no_length, mandatory),
         {{printableString, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'universalString'
      <<0:2,_:1,28:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_universal_string(Bytes1,{1,64},[], no_length, mandatory),
         {{universalString, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'utf8String'
      <<0:2,_:1,12:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_UTF8_string(Bytes1,[], mandatory),
         {{utf8String, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'bmpString'
      <<0:2,_:1,30:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_BMP_string(Bytes1,{1,64},[], no_length, mandatory),
         {{bmpString, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


%%================================
%%  X520OrganizationalUnitName
%%================================

'enc_X520OrganizationalUnitName'({'X520OrganizationalUnitName',Val}, TagIn) ->
   'enc_X520OrganizationalUnitName'(Val, TagIn);

'enc_X520OrganizationalUnitName'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      teletexString ->
         ?RT_BER:encode_restricted_string([], element(2,Val), 20, []);
      printableString ->
         ?RT_BER:encode_restricted_string([], element(2,Val), 19, []);
      universalString ->
         ?RT_BER:encode_universal_string([], element(2,Val), []);
      utf8String ->
         ?RT_BER:encode_UTF8_string([], element(2,Val), []);
      bmpString ->
         ?RT_BER:encode_BMP_string([], element(2,Val), []);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).




'dec_X520OrganizationalUnitName'(Bytes, OptOrMand) ->
   'dec_X520OrganizationalUnitName'(Bytes, OptOrMand, []).

'dec_X520OrganizationalUnitName'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'teletexString'
      <<0:2,_:1,20:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_restricted_string(Bytes1,{1,64},20,[], no_length, mandatory),
         {{teletexString, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'printableString'
      <<0:2,_:1,19:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_restricted_string(Bytes1,{1,64},19,[], no_length, mandatory),
         {{printableString, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'universalString'
      <<0:2,_:1,28:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_universal_string(Bytes1,{1,64},[], no_length, mandatory),
         {{universalString, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'utf8String'
      <<0:2,_:1,12:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_UTF8_string(Bytes1,[], mandatory),
         {{utf8String, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'bmpString'
      <<0:2,_:1,30:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_BMP_string(Bytes1,{1,64},[], no_length, mandatory),
         {{bmpString, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


%%================================
%%  X520Title
%%================================

'enc_X520Title'({'X520Title',Val}, TagIn) ->
   'enc_X520Title'(Val, TagIn);

'enc_X520Title'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      teletexString ->
         ?RT_BER:encode_restricted_string([], element(2,Val), 20, []);
      printableString ->
         ?RT_BER:encode_restricted_string([], element(2,Val), 19, []);
      universalString ->
         ?RT_BER:encode_universal_string([], element(2,Val), []);
      utf8String ->
         ?RT_BER:encode_UTF8_string([], element(2,Val), []);
      bmpString ->
         ?RT_BER:encode_BMP_string([], element(2,Val), []);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).




'dec_X520Title'(Bytes, OptOrMand) ->
   'dec_X520Title'(Bytes, OptOrMand, []).

'dec_X520Title'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'teletexString'
      <<0:2,_:1,20:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_restricted_string(Bytes1,{1,64},20,[], no_length, mandatory),
         {{teletexString, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'printableString'
      <<0:2,_:1,19:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_restricted_string(Bytes1,{1,64},19,[], no_length, mandatory),
         {{printableString, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'universalString'
      <<0:2,_:1,28:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_universal_string(Bytes1,{1,64},[], no_length, mandatory),
         {{universalString, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'utf8String'
      <<0:2,_:1,12:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_UTF8_string(Bytes1,[], mandatory),
         {{utf8String, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'bmpString'
      <<0:2,_:1,30:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_BMP_string(Bytes1,{1,64},[], no_length, mandatory),
         {{bmpString, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


%%================================
%%  X520dnQualifier
%%================================

'enc_X520dnQualifier'({'X520dnQualifier',Val}, TagIn) ->
   'enc_X520dnQualifier'(Val, TagIn);

'enc_X520dnQualifier'(Val, TagIn) ->
?RT_BER:encode_restricted_string([], Val, 19, TagIn ++ []).


'dec_X520dnQualifier'(Bytes, OptOrMand) ->
   'dec_X520dnQualifier'(Bytes, OptOrMand, []).

'dec_X520dnQualifier'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_restricted_string(Bytes,[],19,TagIn++[], no_length, OptOrMand).



%%================================
%%  X520countryName
%%================================

'enc_X520countryName'({'X520countryName',Val}, TagIn) ->
   'enc_X520countryName'(Val, TagIn);

'enc_X520countryName'(Val, TagIn) ->
?RT_BER:encode_restricted_string([], Val, 19, TagIn ++ []).


'dec_X520countryName'(Bytes, OptOrMand) ->
   'dec_X520countryName'(Bytes, OptOrMand, []).

'dec_X520countryName'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_restricted_string(Bytes,2,19,TagIn++[], no_length, OptOrMand).



%%================================
%%  X520SerialNumber
%%================================

'enc_X520SerialNumber'({'X520SerialNumber',Val}, TagIn) ->
   'enc_X520SerialNumber'(Val, TagIn);

'enc_X520SerialNumber'(Val, TagIn) ->
?RT_BER:encode_restricted_string([], Val, 19, TagIn ++ []).


'dec_X520SerialNumber'(Bytes, OptOrMand) ->
   'dec_X520SerialNumber'(Bytes, OptOrMand, []).

'dec_X520SerialNumber'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_restricted_string(Bytes,{1,64},19,TagIn++[], no_length, OptOrMand).



%%================================
%%  X520Pseudonym
%%================================

'enc_X520Pseudonym'({'X520Pseudonym',Val}, TagIn) ->
   'enc_X520Pseudonym'(Val, TagIn);

'enc_X520Pseudonym'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      teletexString ->
         ?RT_BER:encode_restricted_string([], element(2,Val), 20, []);
      printableString ->
         ?RT_BER:encode_restricted_string([], element(2,Val), 19, []);
      universalString ->
         ?RT_BER:encode_universal_string([], element(2,Val), []);
      utf8String ->
         ?RT_BER:encode_UTF8_string([], element(2,Val), []);
      bmpString ->
         ?RT_BER:encode_BMP_string([], element(2,Val), []);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).




'dec_X520Pseudonym'(Bytes, OptOrMand) ->
   'dec_X520Pseudonym'(Bytes, OptOrMand, []).

'dec_X520Pseudonym'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'teletexString'
      <<0:2,_:1,20:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_restricted_string(Bytes1,{1,128},20,[], no_length, mandatory),
         {{teletexString, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'printableString'
      <<0:2,_:1,19:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_restricted_string(Bytes1,{1,128},19,[], no_length, mandatory),
         {{printableString, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'universalString'
      <<0:2,_:1,28:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_universal_string(Bytes1,{1,128},[], no_length, mandatory),
         {{universalString, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'utf8String'
      <<0:2,_:1,12:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_UTF8_string(Bytes1,[], mandatory),
         {{utf8String, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'bmpString'
      <<0:2,_:1,30:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_BMP_string(Bytes1,{1,128},[], no_length, mandatory),
         {{bmpString, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


%%================================
%%  DomainComponent
%%================================

'enc_DomainComponent'({'DomainComponent',Val}, TagIn) ->
   'enc_DomainComponent'(Val, TagIn);

'enc_DomainComponent'(Val, TagIn) ->
?RT_BER:encode_restricted_string([], Val, 22, TagIn ++ []).


'dec_DomainComponent'(Bytes, OptOrMand) ->
   'dec_DomainComponent'(Bytes, OptOrMand, []).

'dec_DomainComponent'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_restricted_string(Bytes,[],22,TagIn++[], no_length, OptOrMand).



%%================================
%%  EmailAddress
%%================================

'enc_EmailAddress'({'EmailAddress',Val}, TagIn) ->
   'enc_EmailAddress'(Val, TagIn);

'enc_EmailAddress'(Val, TagIn) ->
?RT_BER:encode_restricted_string([], Val, 22, TagIn ++ []).


'dec_EmailAddress'(Bytes, OptOrMand) ->
   'dec_EmailAddress'(Bytes, OptOrMand, []).

'dec_EmailAddress'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_restricted_string(Bytes,{1,255},22,TagIn++[], no_length, OptOrMand).



%%================================
%%  Name
%%================================

'enc_Name'({'Name',Val}, TagIn) ->
   'enc_Name'(Val, TagIn);

'enc_Name'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      rdnSequence ->
         'enc_RDNSequence'(element(2,Val), []);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).




'dec_Name'(Bytes, OptOrMand) ->
   'dec_Name'(Bytes, OptOrMand, []).

'dec_Name'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'rdnSequence'
      <<0:2,_:1,16:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_RDNSequence'(Bytes1, mandatory, []),
         {{rdnSequence, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


%%================================
%%  RDNSequence
%%================================

'enc_RDNSequence'({'RDNSequence',Val}, TagIn) ->
   'enc_RDNSequence'(Val, TagIn);

'enc_RDNSequence'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_RDNSequence_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_RDNSequence_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_RDNSequence_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_RelativeDistinguishedName'(H, []),
   'enc_RDNSequence_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_RDNSequence'(Bytes, OptOrMand) ->
   'dec_RDNSequence'(Bytes, OptOrMand, []).

'dec_RDNSequence'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_RelativeDistinguishedName'/3, [], []).




%%================================
%%  DistinguishedName
%%================================

'enc_DistinguishedName'({'DistinguishedName',Val}, TagIn) ->
   'enc_DistinguishedName'(Val, TagIn);

'enc_DistinguishedName'(Val, TagIn) ->
   'enc_RDNSequence'(Val, TagIn ++ []).


'dec_DistinguishedName'(Bytes, OptOrMand) ->
   'dec_DistinguishedName'(Bytes, OptOrMand, []).

'dec_DistinguishedName'(Bytes, OptOrMand, TagIn) ->
'dec_RDNSequence'(Bytes, OptOrMand, TagIn++[]).



%%================================
%%  RelativeDistinguishedName
%%================================

'enc_RelativeDistinguishedName'({'RelativeDistinguishedName',Val}, TagIn) ->
   'enc_RelativeDistinguishedName'(Val, TagIn);

'enc_RelativeDistinguishedName'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_RelativeDistinguishedName_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,17,'IMPLICIT',32}], EncBytes, EncLen).

'enc_RelativeDistinguishedName_components'([], AccBytes, AccLen) -> 
   {asn1rt_check:dynamicsort_SETOF(AccBytes),AccLen};

'enc_RelativeDistinguishedName_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_AttributeTypeAndValue'(H, []),
   'enc_RelativeDistinguishedName_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_RelativeDistinguishedName'(Bytes, OptOrMand) ->
   'dec_RelativeDistinguishedName'(Bytes, OptOrMand, []).

'dec_RelativeDistinguishedName'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,17,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_AttributeTypeAndValue'/3, [], []).




%%================================
%%  DirectoryString
%%================================

'enc_DirectoryString'({'DirectoryString',Val}, TagIn) ->
   'enc_DirectoryString'(Val, TagIn);

'enc_DirectoryString'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      teletexString ->
         ?RT_BER:encode_restricted_string([], element(2,Val), 20, []);
      printableString ->
         ?RT_BER:encode_restricted_string([], element(2,Val), 19, []);
      universalString ->
         ?RT_BER:encode_universal_string([], element(2,Val), []);
      utf8String ->
         ?RT_BER:encode_UTF8_string([], element(2,Val), []);
      bmpString ->
         ?RT_BER:encode_BMP_string([], element(2,Val), []);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).




'dec_DirectoryString'(Bytes, OptOrMand) ->
   'dec_DirectoryString'(Bytes, OptOrMand, []).

'dec_DirectoryString'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'teletexString'
      <<0:2,_:1,20:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_restricted_string(Bytes1,{1,'MAX'},20,[], no_length, mandatory),
         {{teletexString, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'printableString'
      <<0:2,_:1,19:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_restricted_string(Bytes1,{1,'MAX'},19,[], no_length, mandatory),
         {{printableString, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'universalString'
      <<0:2,_:1,28:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_universal_string(Bytes1,{1,'MAX'},[], no_length, mandatory),
         {{universalString, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'utf8String'
      <<0:2,_:1,12:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_UTF8_string(Bytes1,[], mandatory),
         {{utf8String, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'bmpString'
      <<0:2,_:1,30:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_BMP_string(Bytes1,{1,'MAX'},[], no_length, mandatory),
         {{bmpString, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


%%================================
%%  Certificate
%%================================
'enc_Certificate'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External OCSP:TBSCertificate
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_TBSCertificate'(?RT_BER:cindex(2,Val,tbsCertificate), []),

%%-------------------------------------------------
%% attribute number 2   External OCSP:AlgorithmIdentifier
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_AlgorithmIdentifier'(?RT_BER:cindex(3,Val,signatureAlgorithm), []),

%%-------------------------------------------------
%% attribute number 3 with type BIT STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_bit_string([], ?RT_BER:cindex(4,Val,signature), [], []),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_Certificate'(Bytes, OptOrMand) ->
   'dec_Certificate'(Bytes, OptOrMand, []).

'dec_Certificate'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External OCSP:TBSCertificate
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_TBSCertificate'(Bytes2, mandatory, []),

%%-------------------------------------------------
%% attribute number 2   External OCSP:AlgorithmIdentifier
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_AlgorithmIdentifier'(Bytes3, mandatory, []),

%%-------------------------------------------------
%% attribute number 3 with type BIT STRING
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_bit_string(Bytes4,[],[],[], no_length, mandatory),

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'Certificate', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.


%%================================
%%  TBSCertificate
%%================================
'enc_TBSCertificate'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER DEFAULT = 0
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case catch asn1rt_check:check_int(0, ?RT_BER:cindex(2,Val,version), [{v1,0},{v2,1},{v3,2}]) of
            true -> {[],0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,version), [{v1,0},{v2,1},{v3,2}], [{tag,128,0,'EXPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,serialNumber), []),

%%-------------------------------------------------
%% attribute number 3   External OCSP:AlgorithmIdentifier
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_AlgorithmIdentifier'(?RT_BER:cindex(4,Val,signature), []),

%%-------------------------------------------------
%% attribute number 4   External OCSP:Name
%%-------------------------------------------------
   {EncBytes4,EncLen4} = 'enc_Name'(?RT_BER:cindex(5,Val,issuer), []),

%%-------------------------------------------------
%% attribute number 5   External OCSP:Validity
%%-------------------------------------------------
   {EncBytes5,EncLen5} = 'enc_Validity'(?RT_BER:cindex(6,Val,validity), []),

%%-------------------------------------------------
%% attribute number 6   External OCSP:Name
%%-------------------------------------------------
   {EncBytes6,EncLen6} = 'enc_Name'(?RT_BER:cindex(7,Val,subject), []),

%%-------------------------------------------------
%% attribute number 7   External OCSP:SubjectPublicKeyInfo
%%-------------------------------------------------
   {EncBytes7,EncLen7} = 'enc_SubjectPublicKeyInfo'(?RT_BER:cindex(8,Val,subjectPublicKeyInfo), []),

%%-------------------------------------------------
%% attribute number 8 with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case ?RT_BER:cindex(9,Val,issuerUniqueID) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_bit_string([], ?RT_BER:cindex(9,Val,issuerUniqueID), [], [{tag,128,1,'IMPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 9 with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case ?RT_BER:cindex(10,Val,subjectUniqueID) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_bit_string([], ?RT_BER:cindex(10,Val,subjectUniqueID), [], [{tag,128,2,'IMPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 10   External OCSP:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case ?RT_BER:cindex(11,Val,extensions) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Extensions'(?RT_BER:cindex(11,Val,extensions), [{tag,128,3,'EXPLICIT',32}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_TBSCertificate'(Bytes, OptOrMand) ->
   'dec_TBSCertificate'(Bytes, OptOrMand, []).

'dec_TBSCertificate'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER DEFAULT = 0
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<2:2,_:1,0:5,_/binary>> ->
?RT_BER:decode_integer(Bytes2,[],[{v1,0},{v2,1},{v3,2}],[{tag,128,0,'EXPLICIT',32}], mandatory);
_ ->
{0,Bytes2, 0 }
end,

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_integer(Bytes3,[],[], mandatory),

%%-------------------------------------------------
%% attribute number 3   External OCSP:AlgorithmIdentifier
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = 'dec_AlgorithmIdentifier'(Bytes4, mandatory, []),

%%-------------------------------------------------
%% attribute number 4   External OCSP:Name
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = 'dec_Name'(Bytes5, mandatory, []),

%%-------------------------------------------------
%% attribute number 5   External OCSP:Validity
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = 'dec_Validity'(Bytes6, mandatory, []),

%%-------------------------------------------------
%% attribute number 6   External OCSP:Name
%%-------------------------------------------------
   {Term6,Bytes8,Rb7} = 'dec_Name'(Bytes7, mandatory, []),

%%-------------------------------------------------
%% attribute number 7   External OCSP:SubjectPublicKeyInfo
%%-------------------------------------------------
   {Term7,Bytes9,Rb8} = 'dec_SubjectPublicKeyInfo'(Bytes8, mandatory, []),

%%-------------------------------------------------
%% attribute number 8 with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {Term8,Bytes10,Rb9} = case Bytes9 of
<<2:2,_:1,1:5,_/binary>> ->
?RT_BER:decode_bit_string(Bytes9,[],[],[{tag,128,1,'IMPLICIT',32}], no_length, mandatory);
_ ->
{ asn1_NOVALUE, Bytes9, 0 }
end,

%%-------------------------------------------------
%% attribute number 9 with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {Term9,Bytes11,Rb10} = case Bytes10 of
<<2:2,_:1,2:5,_/binary>> ->
?RT_BER:decode_bit_string(Bytes10,[],[],[{tag,128,2,'IMPLICIT',32}], no_length, mandatory);
_ ->
{ asn1_NOVALUE, Bytes10, 0 }
end,

%%-------------------------------------------------
%% attribute number 10   External OCSP:Extensions OPTIONAL
%%-------------------------------------------------
   {Term10,Bytes12,Rb11} = case Bytes11 of
<<2:2,_:1,3:5,_/binary>> ->
'dec_Extensions'(Bytes11, opt_or_default, [{tag,128,3,'EXPLICIT',32}]);
_ ->
{ asn1_NOVALUE, Bytes11, 0 }
end,

   {Bytes13,Rb12} = ?RT_BER:restbytes2(RemBytes, Bytes12,noext),
   {{'TBSCertificate', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10}, Bytes13, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7+Rb8+Rb9+Rb10+Rb11+Rb12}.


%%================================
%%  Version
%%================================

'enc_Version'({'Version',Val}, TagIn) ->
   'enc_Version'(Val, TagIn);

'enc_Version'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, [{v1,0},{v2,1},{v3,2}], TagIn ++ []).


'dec_Version'(Bytes, OptOrMand) ->
   'dec_Version'(Bytes, OptOrMand, []).

'dec_Version'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_integer(Bytes,[],[{v1,0},{v2,1},{v3,2}],TagIn++[], OptOrMand).



%%================================
%%  CertificateSerialNumber
%%================================

'enc_CertificateSerialNumber'({'CertificateSerialNumber',Val}, TagIn) ->
   'enc_CertificateSerialNumber'(Val, TagIn);

'enc_CertificateSerialNumber'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, TagIn ++ []).


'dec_CertificateSerialNumber'(Bytes, OptOrMand) ->
   'dec_CertificateSerialNumber'(Bytes, OptOrMand, []).

'dec_CertificateSerialNumber'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_integer(Bytes,[],TagIn++[], OptOrMand).



%%================================
%%  Validity
%%================================
'enc_Validity'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External OCSP:Time
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_Time'(?RT_BER:cindex(2,Val,notBefore), []),

%%-------------------------------------------------
%% attribute number 2   External OCSP:Time
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_Time'(?RT_BER:cindex(3,Val,notAfter), []),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_Validity'(Bytes, OptOrMand) ->
   'dec_Validity'(Bytes, OptOrMand, []).

'dec_Validity'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External OCSP:Time
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_Time'(Bytes2, mandatory, []),

%%-------------------------------------------------
%% attribute number 2   External OCSP:Time
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_Time'(Bytes3, mandatory, []),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'Validity', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  Time
%%================================

'enc_Time'({'Time',Val}, TagIn) ->
   'enc_Time'(Val, TagIn);

'enc_Time'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      utcTime ->
         ?RT_BER:encode_utc_time([], element(2,Val), []);
      generalTime ->
         ?RT_BER:encode_generalized_time([], element(2,Val), []);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).




'dec_Time'(Bytes, OptOrMand) ->
   'dec_Time'(Bytes, OptOrMand, []).

'dec_Time'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'utcTime'
      <<0:2,_:1,23:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_utc_time(Bytes1,[],[], no_length, mandatory),
         {{utcTime, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'generalTime'
      <<0:2,_:1,24:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_generalized_time(Bytes1,[],[], no_length, mandatory),
         {{generalTime, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


%%================================
%%  UniqueIdentifier
%%================================

'enc_UniqueIdentifier'({'UniqueIdentifier',Val}, TagIn) ->
   'enc_UniqueIdentifier'(Val, TagIn);

'enc_UniqueIdentifier'(Val, TagIn) ->
?RT_BER:encode_bit_string([], Val, [], TagIn ++ []).


'dec_UniqueIdentifier'(Bytes, OptOrMand) ->
   'dec_UniqueIdentifier'(Bytes, OptOrMand, []).

'dec_UniqueIdentifier'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_bit_string(Bytes,[],[],TagIn++[], no_length, OptOrMand).



%%================================
%%  SubjectPublicKeyInfo
%%================================
'enc_SubjectPublicKeyInfo'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External OCSP:AlgorithmIdentifier
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_AlgorithmIdentifier'(?RT_BER:cindex(2,Val,algorithm), []),

%%-------------------------------------------------
%% attribute number 2 with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_bit_string([], ?RT_BER:cindex(3,Val,subjectPublicKey), [], []),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_SubjectPublicKeyInfo'(Bytes, OptOrMand) ->
   'dec_SubjectPublicKeyInfo'(Bytes, OptOrMand, []).

'dec_SubjectPublicKeyInfo'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External OCSP:AlgorithmIdentifier
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_AlgorithmIdentifier'(Bytes2, mandatory, []),

%%-------------------------------------------------
%% attribute number 2 with type BIT STRING
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_bit_string(Bytes3,[],[],[], no_length, mandatory),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'SubjectPublicKeyInfo', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  Extensions
%%================================

'enc_Extensions'({'Extensions',Val}, TagIn) ->
   'enc_Extensions'(Val, TagIn);

'enc_Extensions'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_Extensions_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_Extension'(H, []),
   'enc_Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_Extensions'(Bytes, OptOrMand) ->
   'dec_Extensions'(Bytes, OptOrMand, []).

'dec_Extensions'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_Extension'/3, [], []).




%%================================
%%  Extension
%%================================
'enc_Extension'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type OBJECT IDENTIFIER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_object_identifier(?RT_BER:cindex(2,Val,extnID), []),

%%-------------------------------------------------
%% attribute number 2 with type BOOLEAN DEFAULT = false
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case catch asn1rt_check:check_bool(false, ?RT_BER:cindex(3,Val,critical)) of
            true -> {[],0};
         _ ->
            ?RT_BER:encode_boolean(?RT_BER:cindex(3,Val,critical), [])
       end,

%%-------------------------------------------------
%% attribute number 3 with type OCTET STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_octet_string([], ?RT_BER:cindex(4,Val,extnValue), []),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_Extension'(Bytes, OptOrMand) ->
   'dec_Extension'(Bytes, OptOrMand, []).

'dec_Extension'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type OBJECT IDENTIFIER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_object_identifier(Bytes2,[], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type BOOLEAN DEFAULT = false
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<0:2,_:1,1:5,_/binary>> ->
?RT_BER:decode_boolean(Bytes3,[], mandatory);
_ ->
{false,Bytes3, 0 }
end,

%%-------------------------------------------------
%% attribute number 3 with type OCTET STRING
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_octet_string(Bytes4,[],[], no_length, mandatory),

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'Extension', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.


%%================================
%%  CertificateList
%%================================
'enc_CertificateList'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External OCSP:TBSCertList
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_TBSCertList'(?RT_BER:cindex(2,Val,tbsCertList), []),

%%-------------------------------------------------
%% attribute number 2   External OCSP:AlgorithmIdentifier
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_AlgorithmIdentifier'(?RT_BER:cindex(3,Val,signatureAlgorithm), []),

%%-------------------------------------------------
%% attribute number 3 with type BIT STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_bit_string([], ?RT_BER:cindex(4,Val,signature), [], []),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_CertificateList'(Bytes, OptOrMand) ->
   'dec_CertificateList'(Bytes, OptOrMand, []).

'dec_CertificateList'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External OCSP:TBSCertList
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_TBSCertList'(Bytes2, mandatory, []),

%%-------------------------------------------------
%% attribute number 2   External OCSP:AlgorithmIdentifier
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_AlgorithmIdentifier'(Bytes3, mandatory, []),

%%-------------------------------------------------
%% attribute number 3 with type BIT STRING
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_bit_string(Bytes4,[],[],[], no_length, mandatory),

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'CertificateList', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.


%%================================
%%  TBSCertList
%%================================
'enc_TBSCertList'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,version) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,version), [{v1,0},{v2,1},{v3,2}], [])
       end,

%%-------------------------------------------------
%% attribute number 2   External OCSP:AlgorithmIdentifier
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_AlgorithmIdentifier'(?RT_BER:cindex(3,Val,signature), []),

%%-------------------------------------------------
%% attribute number 3   External OCSP:Name
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_Name'(?RT_BER:cindex(4,Val,issuer), []),

%%-------------------------------------------------
%% attribute number 4   External OCSP:Time
%%-------------------------------------------------
   {EncBytes4,EncLen4} = 'enc_Time'(?RT_BER:cindex(5,Val,thisUpdate), []),

%%-------------------------------------------------
%% attribute number 5   External OCSP:Time OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case ?RT_BER:cindex(6,Val,nextUpdate) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Time'(?RT_BER:cindex(6,Val,nextUpdate), [])
       end,

%%-------------------------------------------------
%% attribute number 6 with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case ?RT_BER:cindex(7,Val,revokedCertificates) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_TBSCertList_revokedCertificates'(?RT_BER:cindex(7,Val,revokedCertificates), [])
       end,

%%-------------------------------------------------
%% attribute number 7   External OCSP:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case ?RT_BER:cindex(8,Val,crlExtensions) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Extensions'(?RT_BER:cindex(8,Val,crlExtensions), [{tag,128,0,'EXPLICIT',32}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  TBSCertList_revokedCertificates
%%================================

'enc_TBSCertList_revokedCertificates'({'TBSCertList_revokedCertificates',Val}, TagIn) ->
   'enc_TBSCertList_revokedCertificates'(Val, TagIn);

'enc_TBSCertList_revokedCertificates'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_TBSCertList_revokedCertificates_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_TBSCertList_revokedCertificates_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_TBSCertList_revokedCertificates_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_TBSCertList_revokedCertificates_SEQOF'(H, []),
   'enc_TBSCertList_revokedCertificates_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  TBSCertList_revokedCertificates_SEQOF
%%================================
'enc_TBSCertList_revokedCertificates_SEQOF'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,userCertificate), []),

%%-------------------------------------------------
%% attribute number 2   External OCSP:Time
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_Time'(?RT_BER:cindex(3,Val,revocationDate), []),

%%-------------------------------------------------
%% attribute number 3   External OCSP:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,crlEntryExtensions) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Extensions'(?RT_BER:cindex(4,Val,crlEntryExtensions), [])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_TBSCertList_revokedCertificates_SEQOF'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,[],[], mandatory),

%%-------------------------------------------------
%% attribute number 2   External OCSP:Time
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_Time'(Bytes3, mandatory, []),

%%-------------------------------------------------
%% attribute number 3   External OCSP:Extensions OPTIONAL
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = case Bytes4 of
<<0:2,_:1,16:5,_/binary>> ->
'dec_Extensions'(Bytes4, opt_or_default, []);
_ ->
{ asn1_NOVALUE, Bytes4, 0 }
end,

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'TBSCertList_revokedCertificates_SEQOF', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.
'dec_TBSCertList_revokedCertificates'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_TBSCertList_revokedCertificates_SEQOF'/3, [], []).




'dec_TBSCertList'(Bytes, OptOrMand) ->
   'dec_TBSCertList'(Bytes, OptOrMand, []).

'dec_TBSCertList'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<0:2,_:1,2:5,_/binary>> ->
?RT_BER:decode_integer(Bytes2,[],[{v1,0},{v2,1},{v3,2}],[], mandatory);
_ ->
{ asn1_NOVALUE, Bytes2, 0 }
end,

%%-------------------------------------------------
%% attribute number 2   External OCSP:AlgorithmIdentifier
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_AlgorithmIdentifier'(Bytes3, mandatory, []),

%%-------------------------------------------------
%% attribute number 3   External OCSP:Name
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = 'dec_Name'(Bytes4, mandatory, []),

%%-------------------------------------------------
%% attribute number 4   External OCSP:Time
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = 'dec_Time'(Bytes5, mandatory, []),

%%-------------------------------------------------
%% attribute number 5   External OCSP:Time OPTIONAL
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = case (catch 'dec_Time'(Bytes6, opt_or_default, [])) of
{'EXIT',{error,{asn1,{no_optional_tag,_}}}} -> { asn1_NOVALUE, Bytes6, 0 };
Casetmp1-> Casetmp1
end,

%%-------------------------------------------------
%% attribute number 6 with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {Term6,Bytes8,Rb7} = case Bytes7 of
<<0:2,_:1,16:5,_/binary>> ->
'dec_TBSCertList_revokedCertificates'(Bytes7, opt_or_default, []);
_ ->
{ asn1_NOVALUE, Bytes7, 0 }
end,

%%-------------------------------------------------
%% attribute number 7   External OCSP:Extensions OPTIONAL
%%-------------------------------------------------
   {Term7,Bytes9,Rb8} = case Bytes8 of
<<2:2,_:1,0:5,_/binary>> ->
'dec_Extensions'(Bytes8, opt_or_default, [{tag,128,0,'EXPLICIT',32}]);
_ ->
{ asn1_NOVALUE, Bytes8, 0 }
end,

   {Bytes10,Rb9} = ?RT_BER:restbytes2(RemBytes, Bytes9,noext),
   {{'TBSCertList', Term1, Term2, Term3, Term4, Term5, Term6, Term7}, Bytes10, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7+Rb8+Rb9}.


%%================================
%%  AlgorithmIdentifier
%%================================
'enc_AlgorithmIdentifier'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type OBJECT IDENTIFIER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_object_identifier(?RT_BER:cindex(2,Val,algorithm), []),

%%-------------------------------------------------
%% attribute number 2 with type ASN1_OPEN_TYPE OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,parameters) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_open_type(?RT_BER:cindex(3,Val,parameters), [])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_AlgorithmIdentifier'(Bytes, OptOrMand) ->
   'dec_AlgorithmIdentifier'(Bytes, OptOrMand, []).

'dec_AlgorithmIdentifier'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type OBJECT IDENTIFIER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_object_identifier(Bytes2,[], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type ASN1_OPEN_TYPE OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case (catch ?RT_BER:decode_open_type(ber_bin,Bytes3,[])) of
{'EXIT',{error,{asn1,{no_optional_tag,_}}}} -> { asn1_NOVALUE, Bytes3, 0 };
Casetmp1-> Casetmp1
end,

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'AlgorithmIdentifier', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  ORAddress
%%================================
'enc_ORAddress'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External OCSP:BuiltInStandardAttributes
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_BuiltInStandardAttributes'(?RT_BER:cindex(2,Val,'built-in-standard-attributes'), []),

%%-------------------------------------------------
%% attribute number 2   External OCSP:BuiltInDomainDefinedAttributes OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,'built-in-domain-defined-attributes') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_BuiltInDomainDefinedAttributes'(?RT_BER:cindex(3,Val,'built-in-domain-defined-attributes'), [])
       end,

%%-------------------------------------------------
%% attribute number 3   External OCSP:ExtensionAttributes OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,'extension-attributes') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ExtensionAttributes'(?RT_BER:cindex(4,Val,'extension-attributes'), [])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_ORAddress'(Bytes, OptOrMand) ->
   'dec_ORAddress'(Bytes, OptOrMand, []).

'dec_ORAddress'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External OCSP:BuiltInStandardAttributes
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_BuiltInStandardAttributes'(Bytes2, mandatory, []),

%%-------------------------------------------------
%% attribute number 2   External OCSP:BuiltInDomainDefinedAttributes OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<0:2,_:1,16:5,_/binary>> ->
'dec_BuiltInDomainDefinedAttributes'(Bytes3, opt_or_default, []);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

%%-------------------------------------------------
%% attribute number 3   External OCSP:ExtensionAttributes OPTIONAL
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = case Bytes4 of
<<0:2,_:1,17:5,_/binary>> ->
'dec_ExtensionAttributes'(Bytes4, opt_or_default, []);
_ ->
{ asn1_NOVALUE, Bytes4, 0 }
end,

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'ORAddress', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.


%%================================
%%  BuiltInStandardAttributes
%%================================
'enc_BuiltInStandardAttributes'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External OCSP:CountryName OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,'country-name') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CountryName'(?RT_BER:cindex(2,Val,'country-name'), [])
       end,

%%-------------------------------------------------
%% attribute number 2   External OCSP:AdministrationDomainName OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,'administration-domain-name') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_AdministrationDomainName'(?RT_BER:cindex(3,Val,'administration-domain-name'), [])
       end,

%%-------------------------------------------------
%% attribute number 3 with type NumericString OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,'network-address') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(4,Val,'network-address'), 18, [{tag,128,0,'IMPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 4 with type PrintableString OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case ?RT_BER:cindex(5,Val,'terminal-identifier') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(5,Val,'terminal-identifier'), 19, [{tag,128,1,'IMPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 5   External OCSP:PrivateDomainName OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case ?RT_BER:cindex(6,Val,'private-domain-name') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_PrivateDomainName'(?RT_BER:cindex(6,Val,'private-domain-name'), [{tag,128,2,'EXPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 6 with type PrintableString OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case ?RT_BER:cindex(7,Val,'organization-name') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(7,Val,'organization-name'), 19, [{tag,128,3,'IMPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 7 with type NumericString OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case ?RT_BER:cindex(8,Val,'numeric-user-identifier') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(8,Val,'numeric-user-identifier'), 18, [{tag,128,4,'IMPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 8   External OCSP:PersonalName OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case ?RT_BER:cindex(9,Val,'personal-name') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_PersonalName'(?RT_BER:cindex(9,Val,'personal-name'), [{tag,128,5,'IMPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 9   External OCSP:OrganizationalUnitNames OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case ?RT_BER:cindex(10,Val,'organizational-unit-names') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_OrganizationalUnitNames'(?RT_BER:cindex(10,Val,'organizational-unit-names'), [{tag,128,6,'IMPLICIT',32}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_BuiltInStandardAttributes'(Bytes, OptOrMand) ->
   'dec_BuiltInStandardAttributes'(Bytes, OptOrMand, []).

'dec_BuiltInStandardAttributes'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External OCSP:CountryName OPTIONAL
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<1:2,_:1,1:5,_/binary>> ->
'dec_CountryName'(Bytes2, opt_or_default, []);
_ ->
{ asn1_NOVALUE, Bytes2, 0 }
end,

%%-------------------------------------------------
%% attribute number 2   External OCSP:AdministrationDomainName OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<1:2,_:1,2:5,_/binary>> ->
'dec_AdministrationDomainName'(Bytes3, opt_or_default, []);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

%%-------------------------------------------------
%% attribute number 3 with type NumericString OPTIONAL
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = case Bytes4 of
<<2:2,_:1,0:5,_/binary>> ->
?RT_BER:decode_restricted_string(Bytes4,{1,16},18,[{tag,128,0,'IMPLICIT',32}], no_length, mandatory);
_ ->
{ asn1_NOVALUE, Bytes4, 0 }
end,

%%-------------------------------------------------
%% attribute number 4 with type PrintableString OPTIONAL
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = case Bytes5 of
<<2:2,_:1,1:5,_/binary>> ->
?RT_BER:decode_restricted_string(Bytes5,{1,24},19,[{tag,128,1,'IMPLICIT',32}], no_length, mandatory);
_ ->
{ asn1_NOVALUE, Bytes5, 0 }
end,

%%-------------------------------------------------
%% attribute number 5   External OCSP:PrivateDomainName OPTIONAL
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = case Bytes6 of
<<2:2,_:1,2:5,_/binary>> ->
'dec_PrivateDomainName'(Bytes6, opt_or_default, [{tag,128,2,'EXPLICIT',32}]);
_ ->
{ asn1_NOVALUE, Bytes6, 0 }
end,

%%-------------------------------------------------
%% attribute number 6 with type PrintableString OPTIONAL
%%-------------------------------------------------
   {Term6,Bytes8,Rb7} = case Bytes7 of
<<2:2,_:1,3:5,_/binary>> ->
?RT_BER:decode_restricted_string(Bytes7,{1,64},19,[{tag,128,3,'IMPLICIT',32}], no_length, mandatory);
_ ->
{ asn1_NOVALUE, Bytes7, 0 }
end,

%%-------------------------------------------------
%% attribute number 7 with type NumericString OPTIONAL
%%-------------------------------------------------
   {Term7,Bytes9,Rb8} = case Bytes8 of
<<2:2,_:1,4:5,_/binary>> ->
?RT_BER:decode_restricted_string(Bytes8,{1,32},18,[{tag,128,4,'IMPLICIT',32}], no_length, mandatory);
_ ->
{ asn1_NOVALUE, Bytes8, 0 }
end,

%%-------------------------------------------------
%% attribute number 8   External OCSP:PersonalName OPTIONAL
%%-------------------------------------------------
   {Term8,Bytes10,Rb9} = case Bytes9 of
<<2:2,_:1,5:5,_/binary>> ->
'dec_PersonalName'(Bytes9, opt_or_default, [{tag,128,5,'IMPLICIT',32}]);
_ ->
{ asn1_NOVALUE, Bytes9, 0 }
end,

%%-------------------------------------------------
%% attribute number 9   External OCSP:OrganizationalUnitNames OPTIONAL
%%-------------------------------------------------
   {Term9,Bytes11,Rb10} = case Bytes10 of
<<2:2,_:1,6:5,_/binary>> ->
'dec_OrganizationalUnitNames'(Bytes10, opt_or_default, [{tag,128,6,'IMPLICIT',32}]);
_ ->
{ asn1_NOVALUE, Bytes10, 0 }
end,

   {Bytes12,Rb11} = ?RT_BER:restbytes2(RemBytes, Bytes11,noext),
   {{'BuiltInStandardAttributes', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9}, Bytes12, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7+Rb8+Rb9+Rb10+Rb11}.


%%================================
%%  CountryName
%%================================

'enc_CountryName'({'CountryName',Val}, TagIn) ->
   'enc_CountryName'(Val, TagIn);

'enc_CountryName'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      'x121-dcc-code' ->
         ?RT_BER:encode_restricted_string([], element(2,Val), 18, []);
      'iso-3166-alpha2-code' ->
         ?RT_BER:encode_restricted_string([], element(2,Val), 19, []);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[{tag,64,1,'EXPLICIT',32}], EncBytes, EncLen).




'dec_CountryName'(Bytes, OptOrMand) ->
   'dec_CountryName'(Bytes, OptOrMand, []).

'dec_CountryName'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[{tag,64,1,'EXPLICIT',32}], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'x121-dcc-code'
      <<0:2,_:1,18:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_restricted_string(Bytes1,3,18,[], no_length, mandatory),
         {{'x121-dcc-code', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'iso-3166-alpha2-code'
      <<0:2,_:1,19:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_restricted_string(Bytes1,2,19,[], no_length, mandatory),
         {{'iso-3166-alpha2-code', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


%%================================
%%  AdministrationDomainName
%%================================

'enc_AdministrationDomainName'({'AdministrationDomainName',Val}, TagIn) ->
   'enc_AdministrationDomainName'(Val, TagIn);

'enc_AdministrationDomainName'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      numeric ->
         ?RT_BER:encode_restricted_string([], element(2,Val), 18, []);
      printable ->
         ?RT_BER:encode_restricted_string([], element(2,Val), 19, []);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[{tag,64,2,'EXPLICIT',32}], EncBytes, EncLen).




'dec_AdministrationDomainName'(Bytes, OptOrMand) ->
   'dec_AdministrationDomainName'(Bytes, OptOrMand, []).

'dec_AdministrationDomainName'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[{tag,64,2,'EXPLICIT',32}], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'numeric'
      <<0:2,_:1,18:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_restricted_string(Bytes1,{0,16},18,[], no_length, mandatory),
         {{numeric, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'printable'
      <<0:2,_:1,19:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_restricted_string(Bytes1,{0,16},19,[], no_length, mandatory),
         {{printable, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


%%================================
%%  NetworkAddress
%%================================

'enc_NetworkAddress'({'NetworkAddress',Val}, TagIn) ->
   'enc_NetworkAddress'(Val, TagIn);

'enc_NetworkAddress'(Val, TagIn) ->
?RT_BER:encode_restricted_string([], Val, 18, TagIn ++ []).


'dec_NetworkAddress'(Bytes, OptOrMand) ->
   'dec_NetworkAddress'(Bytes, OptOrMand, []).

'dec_NetworkAddress'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_restricted_string(Bytes,{1,16},18,TagIn++[], no_length, OptOrMand).



%%================================
%%  X121Address
%%================================

'enc_X121Address'({'X121Address',Val}, TagIn) ->
   'enc_X121Address'(Val, TagIn);

'enc_X121Address'(Val, TagIn) ->
?RT_BER:encode_restricted_string([], Val, 18, TagIn ++ []).


'dec_X121Address'(Bytes, OptOrMand) ->
   'dec_X121Address'(Bytes, OptOrMand, []).

'dec_X121Address'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_restricted_string(Bytes,{1,16},18,TagIn++[], no_length, OptOrMand).



%%================================
%%  TerminalIdentifier
%%================================

'enc_TerminalIdentifier'({'TerminalIdentifier',Val}, TagIn) ->
   'enc_TerminalIdentifier'(Val, TagIn);

'enc_TerminalIdentifier'(Val, TagIn) ->
?RT_BER:encode_restricted_string([], Val, 19, TagIn ++ []).


'dec_TerminalIdentifier'(Bytes, OptOrMand) ->
   'dec_TerminalIdentifier'(Bytes, OptOrMand, []).

'dec_TerminalIdentifier'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_restricted_string(Bytes,{1,24},19,TagIn++[], no_length, OptOrMand).



%%================================
%%  PrivateDomainName
%%================================

'enc_PrivateDomainName'({'PrivateDomainName',Val}, TagIn) ->
   'enc_PrivateDomainName'(Val, TagIn);

'enc_PrivateDomainName'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      numeric ->
         ?RT_BER:encode_restricted_string([], element(2,Val), 18, []);
      printable ->
         ?RT_BER:encode_restricted_string([], element(2,Val), 19, []);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).




'dec_PrivateDomainName'(Bytes, OptOrMand) ->
   'dec_PrivateDomainName'(Bytes, OptOrMand, []).

'dec_PrivateDomainName'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'numeric'
      <<0:2,_:1,18:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_restricted_string(Bytes1,{1,16},18,[], no_length, mandatory),
         {{numeric, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'printable'
      <<0:2,_:1,19:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_restricted_string(Bytes1,{1,16},19,[], no_length, mandatory),
         {{printable, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


%%================================
%%  OrganizationName
%%================================

'enc_OrganizationName'({'OrganizationName',Val}, TagIn) ->
   'enc_OrganizationName'(Val, TagIn);

'enc_OrganizationName'(Val, TagIn) ->
?RT_BER:encode_restricted_string([], Val, 19, TagIn ++ []).


'dec_OrganizationName'(Bytes, OptOrMand) ->
   'dec_OrganizationName'(Bytes, OptOrMand, []).

'dec_OrganizationName'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_restricted_string(Bytes,{1,64},19,TagIn++[], no_length, OptOrMand).



%%================================
%%  NumericUserIdentifier
%%================================

'enc_NumericUserIdentifier'({'NumericUserIdentifier',Val}, TagIn) ->
   'enc_NumericUserIdentifier'(Val, TagIn);

'enc_NumericUserIdentifier'(Val, TagIn) ->
?RT_BER:encode_restricted_string([], Val, 18, TagIn ++ []).


'dec_NumericUserIdentifier'(Bytes, OptOrMand) ->
   'dec_NumericUserIdentifier'(Bytes, OptOrMand, []).

'dec_NumericUserIdentifier'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_restricted_string(Bytes,{1,32},18,TagIn++[], no_length, OptOrMand).



%%================================
%%  PersonalName
%%================================
'enc_PersonalName'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type PrintableString
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(2,Val,surname), 19, [{tag,128,0,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type PrintableString OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,'given-name') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(3,Val,'given-name'), 19, [{tag,128,1,'IMPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 3 with type PrintableString OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,initials) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(4,Val,initials), 19, [{tag,128,2,'IMPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 4 with type PrintableString OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case ?RT_BER:cindex(5,Val,'generation-qualifier') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(5,Val,'generation-qualifier'), 19, [{tag,128,3,'IMPLICIT',32}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,17,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_PersonalName'(Bytes, OptOrMand) ->
   'dec_PersonalName'(Bytes, OptOrMand, []).

'dec_PersonalName'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,17,'IMPLICIT',32}], Bytes, OptOrMand), 
   {SetTerm, SetBytes, Rb2} = ?RT_BER:decode_set(0, Len, Bytes1, OptOrMand, fun 'dec_PersonalName_fun'/2, []),
   'dec_PersonalName__result__'(lists:sort(SetTerm), SetBytes, Rb1+Rb2).


%%-------------------------------------------------
%% Set loop fun for PersonalName
%%-------------------------------------------------
'dec_PersonalName_fun'(Bytes, OptOrMand) ->
   TagList = [{surname,[{'CONTEXT',0}]},{'given-name',[{'CONTEXT',1}]},{initials,[{'CONTEXT',2}]},{'generation-qualifier',[{'CONTEXT',3}]}],
   case ?RT_BER:check_if_valid_tag(Bytes, TagList, OptOrMand) of
      'surname' ->
         {Dec, Rest, RbCho2} = ?RT_BER:decode_restricted_string(Bytes,{1,40},19,[{tag,128,0,'IMPLICIT',32}], no_length, mandatory),
{{1,Dec}, Rest, RbCho2};

      'given-name' ->
         {Dec, Rest, RbCho3} = ?RT_BER:decode_restricted_string(Bytes,{1,16},19,[{tag,128,1,'IMPLICIT',32}], no_length, mandatory),
{{2,Dec}, Rest, RbCho3};

      'initials' ->
         {Dec, Rest, RbCho4} = ?RT_BER:decode_restricted_string(Bytes,{1,5},19,[{tag,128,2,'IMPLICIT',32}], no_length, mandatory),
{{3,Dec}, Rest, RbCho4};

      'generation-qualifier' ->
         {Dec, Rest, RbCho5} = ?RT_BER:decode_restricted_string(Bytes,{1,3},19,[{tag,128,3,'IMPLICIT',32}], no_length, mandatory),
{{4,Dec}, Rest, RbCho5};

      %% tag not found, if extensionmark we should skip bytes here
      _ -> 
         {[], Bytes,0}
   end.


%%-------------------------------------------------
%% Result PersonalName
%%-------------------------------------------------
'dec_PersonalName__result__'(TermList, Bytes, Rb) ->

%%-------------------------------------------------
%% attribute number 1 with type PrintableString
%%-------------------------------------------------
   {Term1,TermList1} =
      case TermList of
          [{1,TermTmp}|Rest] -> {TermTmp,Rest};
          _ -> exit({error,{asn1,{mandatory_attribute_no, 1, missing}}})
      end,

%%-------------------------------------------------
%% attribute number 2 with type PrintableString OPTIONAL
%%-------------------------------------------------
   {Term2,TermList2} =
      case TermList1 of
          [{2,TermTmp1}|Rest1] -> {TermTmp1,Rest1};
          _ -> {asn1_NOVALUE, TermList1}
      end,

%%-------------------------------------------------
%% attribute number 3 with type PrintableString OPTIONAL
%%-------------------------------------------------
   {Term3,TermList3} =
      case TermList2 of
          [{3,TermTmp2}|Rest2] -> {TermTmp2,Rest2};
          _ -> {asn1_NOVALUE, TermList2}
      end,

%%-------------------------------------------------
%% attribute number 4 with type PrintableString OPTIONAL
%%-------------------------------------------------
   {Term4,TermList4} =
      case TermList3 of
          [{4,TermTmp3}|Rest3] -> {TermTmp3,Rest3};
          _ -> {asn1_NOVALUE, TermList3}
      end,

   case TermList4 of
      [] -> {{'PersonalName', Term1, Term2, Term3, Term4}, Bytes, Rb};
      ExtraAtt -> exit({error,{asn1,{too_many_attributes, ExtraAtt}}})
   end.





%%================================
%%  OrganizationalUnitNames
%%================================

'enc_OrganizationalUnitNames'({'OrganizationalUnitNames',Val}, TagIn) ->
   'enc_OrganizationalUnitNames'(Val, TagIn);

'enc_OrganizationalUnitNames'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_OrganizationalUnitNames_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_OrganizationalUnitNames_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_OrganizationalUnitNames_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = ?RT_BER:encode_restricted_string([], H, 19, []),
   'enc_OrganizationalUnitNames_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_OrganizationalUnitNames'(Bytes, OptOrMand) ->
   'dec_OrganizationalUnitNames'(Bytes, OptOrMand, []).

'dec_OrganizationalUnitNames'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun(FBytes,_,_)->
?RT_BER:decode_restricted_string(FBytes,{1,32},19,[], no_length, mandatory)
end, [], []).




%%================================
%%  OrganizationalUnitName
%%================================

'enc_OrganizationalUnitName'({'OrganizationalUnitName',Val}, TagIn) ->
   'enc_OrganizationalUnitName'(Val, TagIn);

'enc_OrganizationalUnitName'(Val, TagIn) ->
?RT_BER:encode_restricted_string([], Val, 19, TagIn ++ []).


'dec_OrganizationalUnitName'(Bytes, OptOrMand) ->
   'dec_OrganizationalUnitName'(Bytes, OptOrMand, []).

'dec_OrganizationalUnitName'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_restricted_string(Bytes,{1,32},19,TagIn++[], no_length, OptOrMand).



%%================================
%%  BuiltInDomainDefinedAttributes
%%================================

'enc_BuiltInDomainDefinedAttributes'({'BuiltInDomainDefinedAttributes',Val}, TagIn) ->
   'enc_BuiltInDomainDefinedAttributes'(Val, TagIn);

'enc_BuiltInDomainDefinedAttributes'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_BuiltInDomainDefinedAttributes_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_BuiltInDomainDefinedAttributes_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_BuiltInDomainDefinedAttributes_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_BuiltInDomainDefinedAttribute'(H, []),
   'enc_BuiltInDomainDefinedAttributes_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_BuiltInDomainDefinedAttributes'(Bytes, OptOrMand) ->
   'dec_BuiltInDomainDefinedAttributes'(Bytes, OptOrMand, []).

'dec_BuiltInDomainDefinedAttributes'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_BuiltInDomainDefinedAttribute'/3, [], []).




%%================================
%%  BuiltInDomainDefinedAttribute
%%================================
'enc_BuiltInDomainDefinedAttribute'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type PrintableString
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(2,Val,type), 19, []),

%%-------------------------------------------------
%% attribute number 2 with type PrintableString
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(3,Val,value), 19, []),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_BuiltInDomainDefinedAttribute'(Bytes, OptOrMand) ->
   'dec_BuiltInDomainDefinedAttribute'(Bytes, OptOrMand, []).

'dec_BuiltInDomainDefinedAttribute'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type PrintableString
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_restricted_string(Bytes2,{1,8},19,[], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 2 with type PrintableString
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_restricted_string(Bytes3,{1,128},19,[], no_length, mandatory),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'BuiltInDomainDefinedAttribute', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  ExtensionAttributes
%%================================

'enc_ExtensionAttributes'({'ExtensionAttributes',Val}, TagIn) ->
   'enc_ExtensionAttributes'(Val, TagIn);

'enc_ExtensionAttributes'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_ExtensionAttributes_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,17,'IMPLICIT',32}], EncBytes, EncLen).

'enc_ExtensionAttributes_components'([], AccBytes, AccLen) -> 
   {asn1rt_check:dynamicsort_SETOF(AccBytes),AccLen};

'enc_ExtensionAttributes_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ExtensionAttribute'(H, []),
   'enc_ExtensionAttributes_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_ExtensionAttributes'(Bytes, OptOrMand) ->
   'dec_ExtensionAttributes'(Bytes, OptOrMand, []).

'dec_ExtensionAttributes'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,17,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_ExtensionAttribute'/3, [], []).




%%================================
%%  ExtensionAttribute
%%================================
'enc_ExtensionAttribute'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,'extension-attribute-type'), [{tag,128,0,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type ASN1_OPEN_TYPE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_open_type(?RT_BER:cindex(3,Val,'extension-attribute-value'), [{tag,128,1,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_ExtensionAttribute'(Bytes, OptOrMand) ->
   'dec_ExtensionAttribute'(Bytes, OptOrMand, []).

'dec_ExtensionAttribute'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,256},[{tag,128,0,'IMPLICIT',32}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type ASN1_OPEN_TYPE
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_open_type(ber_bin,Bytes3,[{tag,128,1,'EXPLICIT',32}]),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'ExtensionAttribute', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  CommonName
%%================================

'enc_CommonName'({'CommonName',Val}, TagIn) ->
   'enc_CommonName'(Val, TagIn);

'enc_CommonName'(Val, TagIn) ->
?RT_BER:encode_restricted_string([], Val, 19, TagIn ++ []).


'dec_CommonName'(Bytes, OptOrMand) ->
   'dec_CommonName'(Bytes, OptOrMand, []).

'dec_CommonName'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_restricted_string(Bytes,{1,64},19,TagIn++[], no_length, OptOrMand).



%%================================
%%  TeletexCommonName
%%================================

'enc_TeletexCommonName'({'TeletexCommonName',Val}, TagIn) ->
   'enc_TeletexCommonName'(Val, TagIn);

'enc_TeletexCommonName'(Val, TagIn) ->
?RT_BER:encode_restricted_string([], Val, 20, TagIn ++ []).


'dec_TeletexCommonName'(Bytes, OptOrMand) ->
   'dec_TeletexCommonName'(Bytes, OptOrMand, []).

'dec_TeletexCommonName'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_restricted_string(Bytes,{1,64},20,TagIn++[], no_length, OptOrMand).



%%================================
%%  TeletexOrganizationName
%%================================

'enc_TeletexOrganizationName'({'TeletexOrganizationName',Val}, TagIn) ->
   'enc_TeletexOrganizationName'(Val, TagIn);

'enc_TeletexOrganizationName'(Val, TagIn) ->
?RT_BER:encode_restricted_string([], Val, 20, TagIn ++ []).


'dec_TeletexOrganizationName'(Bytes, OptOrMand) ->
   'dec_TeletexOrganizationName'(Bytes, OptOrMand, []).

'dec_TeletexOrganizationName'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_restricted_string(Bytes,{1,64},20,TagIn++[], no_length, OptOrMand).



%%================================
%%  TeletexPersonalName
%%================================
'enc_TeletexPersonalName'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type TeletexString
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(2,Val,surname), 20, [{tag,128,0,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type TeletexString OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,'given-name') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(3,Val,'given-name'), 20, [{tag,128,1,'IMPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 3 with type TeletexString OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,initials) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(4,Val,initials), 20, [{tag,128,2,'IMPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 4 with type TeletexString OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case ?RT_BER:cindex(5,Val,'generation-qualifier') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(5,Val,'generation-qualifier'), 20, [{tag,128,3,'IMPLICIT',32}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,17,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_TeletexPersonalName'(Bytes, OptOrMand) ->
   'dec_TeletexPersonalName'(Bytes, OptOrMand, []).

'dec_TeletexPersonalName'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,17,'IMPLICIT',32}], Bytes, OptOrMand), 
   {SetTerm, SetBytes, Rb2} = ?RT_BER:decode_set(0, Len, Bytes1, OptOrMand, fun 'dec_TeletexPersonalName_fun'/2, []),
   'dec_TeletexPersonalName__result__'(lists:sort(SetTerm), SetBytes, Rb1+Rb2).


%%-------------------------------------------------
%% Set loop fun for TeletexPersonalName
%%-------------------------------------------------
'dec_TeletexPersonalName_fun'(Bytes, OptOrMand) ->
   TagList = [{surname,[{'CONTEXT',0}]},{'given-name',[{'CONTEXT',1}]},{initials,[{'CONTEXT',2}]},{'generation-qualifier',[{'CONTEXT',3}]}],
   case ?RT_BER:check_if_valid_tag(Bytes, TagList, OptOrMand) of
      'surname' ->
         {Dec, Rest, RbCho2} = ?RT_BER:decode_restricted_string(Bytes,{1,40},20,[{tag,128,0,'IMPLICIT',32}], no_length, mandatory),
{{1,Dec}, Rest, RbCho2};

      'given-name' ->
         {Dec, Rest, RbCho3} = ?RT_BER:decode_restricted_string(Bytes,{1,16},20,[{tag,128,1,'IMPLICIT',32}], no_length, mandatory),
{{2,Dec}, Rest, RbCho3};

      'initials' ->
         {Dec, Rest, RbCho4} = ?RT_BER:decode_restricted_string(Bytes,{1,5},20,[{tag,128,2,'IMPLICIT',32}], no_length, mandatory),
{{3,Dec}, Rest, RbCho4};

      'generation-qualifier' ->
         {Dec, Rest, RbCho5} = ?RT_BER:decode_restricted_string(Bytes,{1,3},20,[{tag,128,3,'IMPLICIT',32}], no_length, mandatory),
{{4,Dec}, Rest, RbCho5};

      %% tag not found, if extensionmark we should skip bytes here
      _ -> 
         {[], Bytes,0}
   end.


%%-------------------------------------------------
%% Result TeletexPersonalName
%%-------------------------------------------------
'dec_TeletexPersonalName__result__'(TermList, Bytes, Rb) ->

%%-------------------------------------------------
%% attribute number 1 with type TeletexString
%%-------------------------------------------------
   {Term1,TermList1} =
      case TermList of
          [{1,TermTmp}|Rest] -> {TermTmp,Rest};
          _ -> exit({error,{asn1,{mandatory_attribute_no, 1, missing}}})
      end,

%%-------------------------------------------------
%% attribute number 2 with type TeletexString OPTIONAL
%%-------------------------------------------------
   {Term2,TermList2} =
      case TermList1 of
          [{2,TermTmp1}|Rest1] -> {TermTmp1,Rest1};
          _ -> {asn1_NOVALUE, TermList1}
      end,

%%-------------------------------------------------
%% attribute number 3 with type TeletexString OPTIONAL
%%-------------------------------------------------
   {Term3,TermList3} =
      case TermList2 of
          [{3,TermTmp2}|Rest2] -> {TermTmp2,Rest2};
          _ -> {asn1_NOVALUE, TermList2}
      end,

%%-------------------------------------------------
%% attribute number 4 with type TeletexString OPTIONAL
%%-------------------------------------------------
   {Term4,TermList4} =
      case TermList3 of
          [{4,TermTmp3}|Rest3] -> {TermTmp3,Rest3};
          _ -> {asn1_NOVALUE, TermList3}
      end,

   case TermList4 of
      [] -> {{'TeletexPersonalName', Term1, Term2, Term3, Term4}, Bytes, Rb};
      ExtraAtt -> exit({error,{asn1,{too_many_attributes, ExtraAtt}}})
   end.





%%================================
%%  TeletexOrganizationalUnitNames
%%================================

'enc_TeletexOrganizationalUnitNames'({'TeletexOrganizationalUnitNames',Val}, TagIn) ->
   'enc_TeletexOrganizationalUnitNames'(Val, TagIn);

'enc_TeletexOrganizationalUnitNames'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_TeletexOrganizationalUnitNames_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_TeletexOrganizationalUnitNames_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_TeletexOrganizationalUnitNames_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = ?RT_BER:encode_restricted_string([], H, 20, []),
   'enc_TeletexOrganizationalUnitNames_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_TeletexOrganizationalUnitNames'(Bytes, OptOrMand) ->
   'dec_TeletexOrganizationalUnitNames'(Bytes, OptOrMand, []).

'dec_TeletexOrganizationalUnitNames'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun(FBytes,_,_)->
?RT_BER:decode_restricted_string(FBytes,{1,32},20,[], no_length, mandatory)
end, [], []).




%%================================
%%  TeletexOrganizationalUnitName
%%================================

'enc_TeletexOrganizationalUnitName'({'TeletexOrganizationalUnitName',Val}, TagIn) ->
   'enc_TeletexOrganizationalUnitName'(Val, TagIn);

'enc_TeletexOrganizationalUnitName'(Val, TagIn) ->
?RT_BER:encode_restricted_string([], Val, 20, TagIn ++ []).


'dec_TeletexOrganizationalUnitName'(Bytes, OptOrMand) ->
   'dec_TeletexOrganizationalUnitName'(Bytes, OptOrMand, []).

'dec_TeletexOrganizationalUnitName'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_restricted_string(Bytes,{1,32},20,TagIn++[], no_length, OptOrMand).



%%================================
%%  PDSName
%%================================

'enc_PDSName'({'PDSName',Val}, TagIn) ->
   'enc_PDSName'(Val, TagIn);

'enc_PDSName'(Val, TagIn) ->
?RT_BER:encode_restricted_string([], Val, 19, TagIn ++ []).


'dec_PDSName'(Bytes, OptOrMand) ->
   'dec_PDSName'(Bytes, OptOrMand, []).

'dec_PDSName'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_restricted_string(Bytes,{1,16},19,TagIn++[], no_length, OptOrMand).



%%================================
%%  PhysicalDeliveryCountryName
%%================================

'enc_PhysicalDeliveryCountryName'({'PhysicalDeliveryCountryName',Val}, TagIn) ->
   'enc_PhysicalDeliveryCountryName'(Val, TagIn);

'enc_PhysicalDeliveryCountryName'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      'x121-dcc-code' ->
         ?RT_BER:encode_restricted_string([], element(2,Val), 18, []);
      'iso-3166-alpha2-code' ->
         ?RT_BER:encode_restricted_string([], element(2,Val), 19, []);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).




'dec_PhysicalDeliveryCountryName'(Bytes, OptOrMand) ->
   'dec_PhysicalDeliveryCountryName'(Bytes, OptOrMand, []).

'dec_PhysicalDeliveryCountryName'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'x121-dcc-code'
      <<0:2,_:1,18:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_restricted_string(Bytes1,3,18,[], no_length, mandatory),
         {{'x121-dcc-code', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'iso-3166-alpha2-code'
      <<0:2,_:1,19:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_restricted_string(Bytes1,2,19,[], no_length, mandatory),
         {{'iso-3166-alpha2-code', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


%%================================
%%  PostalCode
%%================================

'enc_PostalCode'({'PostalCode',Val}, TagIn) ->
   'enc_PostalCode'(Val, TagIn);

'enc_PostalCode'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      'numeric-code' ->
         ?RT_BER:encode_restricted_string([], element(2,Val), 18, []);
      'printable-code' ->
         ?RT_BER:encode_restricted_string([], element(2,Val), 19, []);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).




'dec_PostalCode'(Bytes, OptOrMand) ->
   'dec_PostalCode'(Bytes, OptOrMand, []).

'dec_PostalCode'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'numeric-code'
      <<0:2,_:1,18:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_restricted_string(Bytes1,{1,16},18,[], no_length, mandatory),
         {{'numeric-code', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'printable-code'
      <<0:2,_:1,19:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_restricted_string(Bytes1,{1,16},19,[], no_length, mandatory),
         {{'printable-code', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


%%================================
%%  PhysicalDeliveryOfficeName
%%================================

'enc_PhysicalDeliveryOfficeName'({'PhysicalDeliveryOfficeName',Val}, TagIn) ->
   'enc_PhysicalDeliveryOfficeName'(Val, TagIn);

'enc_PhysicalDeliveryOfficeName'(Val, TagIn) ->
   'enc_PDSParameter'(Val, TagIn ++ []).


'dec_PhysicalDeliveryOfficeName'(Bytes, OptOrMand) ->
   'dec_PhysicalDeliveryOfficeName'(Bytes, OptOrMand, []).

'dec_PhysicalDeliveryOfficeName'(Bytes, OptOrMand, TagIn) ->
'dec_PDSParameter'(Bytes, OptOrMand, TagIn++[]).



%%================================
%%  PhysicalDeliveryOfficeNumber
%%================================

'enc_PhysicalDeliveryOfficeNumber'({'PhysicalDeliveryOfficeNumber',Val}, TagIn) ->
   'enc_PhysicalDeliveryOfficeNumber'(Val, TagIn);

'enc_PhysicalDeliveryOfficeNumber'(Val, TagIn) ->
   'enc_PDSParameter'(Val, TagIn ++ []).


'dec_PhysicalDeliveryOfficeNumber'(Bytes, OptOrMand) ->
   'dec_PhysicalDeliveryOfficeNumber'(Bytes, OptOrMand, []).

'dec_PhysicalDeliveryOfficeNumber'(Bytes, OptOrMand, TagIn) ->
'dec_PDSParameter'(Bytes, OptOrMand, TagIn++[]).



%%================================
%%  ExtensionORAddressComponents
%%================================

'enc_ExtensionORAddressComponents'({'ExtensionORAddressComponents',Val}, TagIn) ->
   'enc_ExtensionORAddressComponents'(Val, TagIn);

'enc_ExtensionORAddressComponents'(Val, TagIn) ->
   'enc_PDSParameter'(Val, TagIn ++ []).


'dec_ExtensionORAddressComponents'(Bytes, OptOrMand) ->
   'dec_ExtensionORAddressComponents'(Bytes, OptOrMand, []).

'dec_ExtensionORAddressComponents'(Bytes, OptOrMand, TagIn) ->
'dec_PDSParameter'(Bytes, OptOrMand, TagIn++[]).



%%================================
%%  PhysicalDeliveryPersonalName
%%================================

'enc_PhysicalDeliveryPersonalName'({'PhysicalDeliveryPersonalName',Val}, TagIn) ->
   'enc_PhysicalDeliveryPersonalName'(Val, TagIn);

'enc_PhysicalDeliveryPersonalName'(Val, TagIn) ->
   'enc_PDSParameter'(Val, TagIn ++ []).


'dec_PhysicalDeliveryPersonalName'(Bytes, OptOrMand) ->
   'dec_PhysicalDeliveryPersonalName'(Bytes, OptOrMand, []).

'dec_PhysicalDeliveryPersonalName'(Bytes, OptOrMand, TagIn) ->
'dec_PDSParameter'(Bytes, OptOrMand, TagIn++[]).



%%================================
%%  PhysicalDeliveryOrganizationName
%%================================

'enc_PhysicalDeliveryOrganizationName'({'PhysicalDeliveryOrganizationName',Val}, TagIn) ->
   'enc_PhysicalDeliveryOrganizationName'(Val, TagIn);

'enc_PhysicalDeliveryOrganizationName'(Val, TagIn) ->
   'enc_PDSParameter'(Val, TagIn ++ []).


'dec_PhysicalDeliveryOrganizationName'(Bytes, OptOrMand) ->
   'dec_PhysicalDeliveryOrganizationName'(Bytes, OptOrMand, []).

'dec_PhysicalDeliveryOrganizationName'(Bytes, OptOrMand, TagIn) ->
'dec_PDSParameter'(Bytes, OptOrMand, TagIn++[]).



%%================================
%%  ExtensionPhysicalDeliveryAddressComponents
%%================================

'enc_ExtensionPhysicalDeliveryAddressComponents'({'ExtensionPhysicalDeliveryAddressComponents',Val}, TagIn) ->
   'enc_ExtensionPhysicalDeliveryAddressComponents'(Val, TagIn);

'enc_ExtensionPhysicalDeliveryAddressComponents'(Val, TagIn) ->
   'enc_PDSParameter'(Val, TagIn ++ []).


'dec_ExtensionPhysicalDeliveryAddressComponents'(Bytes, OptOrMand) ->
   'dec_ExtensionPhysicalDeliveryAddressComponents'(Bytes, OptOrMand, []).

'dec_ExtensionPhysicalDeliveryAddressComponents'(Bytes, OptOrMand, TagIn) ->
'dec_PDSParameter'(Bytes, OptOrMand, TagIn++[]).



%%================================
%%  UnformattedPostalAddress
%%================================
'enc_UnformattedPostalAddress'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,'printable-address') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_UnformattedPostalAddress_printable-address'(?RT_BER:cindex(2,Val,'printable-address'), [])
       end,

%%-------------------------------------------------
%% attribute number 2 with type TeletexString OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,'teletex-string') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(3,Val,'teletex-string'), 20, [])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,17,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  UnformattedPostalAddress_printable-address
%%================================

'enc_UnformattedPostalAddress_printable-address'({'UnformattedPostalAddress_printable-address',Val}, TagIn) ->
   'enc_UnformattedPostalAddress_printable-address'(Val, TagIn);

'enc_UnformattedPostalAddress_printable-address'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_UnformattedPostalAddress_printable-address_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_UnformattedPostalAddress_printable-address_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_UnformattedPostalAddress_printable-address_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = ?RT_BER:encode_restricted_string([], H, 19, []),
   'enc_UnformattedPostalAddress_printable-address_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_UnformattedPostalAddress_printable-address'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun(FBytes,_,_)->
?RT_BER:decode_restricted_string(FBytes,{1,30},19,[], no_length, mandatory)
end, [], []).




'dec_UnformattedPostalAddress'(Bytes, OptOrMand) ->
   'dec_UnformattedPostalAddress'(Bytes, OptOrMand, []).

'dec_UnformattedPostalAddress'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,17,'IMPLICIT',32}], Bytes, OptOrMand), 
   {SetTerm, SetBytes, Rb2} = ?RT_BER:decode_set(0, Len, Bytes1, OptOrMand, fun 'dec_UnformattedPostalAddress_fun'/2, []),
   'dec_UnformattedPostalAddress__result__'(lists:sort(SetTerm), SetBytes, Rb1+Rb2).


%%-------------------------------------------------
%% Set loop fun for UnformattedPostalAddress
%%-------------------------------------------------
'dec_UnformattedPostalAddress_fun'(Bytes, OptOrMand) ->
   TagList = [{'printable-address',[{'UNIVERSAL','SEQUENCE OF'}]},{'teletex-string',[{'UNIVERSAL','TeletexString'}]}],
   case ?RT_BER:check_if_valid_tag(Bytes, TagList, OptOrMand) of
      'printable-address' ->
         {Dec, Rest, RbCho2} = 'dec_UnformattedPostalAddress_printable-address'(Bytes, mandatory, []),
{{1,Dec}, Rest, RbCho2};

      'teletex-string' ->
         {Dec, Rest, RbCho3} = ?RT_BER:decode_restricted_string(Bytes,{1,180},20,[], no_length, mandatory),
{{2,Dec}, Rest, RbCho3};

      %% tag not found, if extensionmark we should skip bytes here
      _ -> 
         {[], Bytes,0}
   end.


%%-------------------------------------------------
%% Result UnformattedPostalAddress
%%-------------------------------------------------
'dec_UnformattedPostalAddress__result__'(TermList, Bytes, Rb) ->

%%-------------------------------------------------
%% attribute number 1 with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {Term1,TermList1} =
      case TermList of
          [{1,TermTmp}|Rest] -> {TermTmp,Rest};
          _ -> {asn1_NOVALUE, TermList}
      end,

%%-------------------------------------------------
%% attribute number 2 with type TeletexString OPTIONAL
%%-------------------------------------------------
   {Term2,TermList2} =
      case TermList1 of
          [{2,TermTmp1}|Rest1] -> {TermTmp1,Rest1};
          _ -> {asn1_NOVALUE, TermList1}
      end,

   case TermList2 of
      [] -> {{'UnformattedPostalAddress', Term1, Term2}, Bytes, Rb};
      ExtraAtt -> exit({error,{asn1,{too_many_attributes, ExtraAtt}}})
   end.





%%================================
%%  StreetAddress
%%================================

'enc_StreetAddress'({'StreetAddress',Val}, TagIn) ->
   'enc_StreetAddress'(Val, TagIn);

'enc_StreetAddress'(Val, TagIn) ->
   'enc_PDSParameter'(Val, TagIn ++ []).


'dec_StreetAddress'(Bytes, OptOrMand) ->
   'dec_StreetAddress'(Bytes, OptOrMand, []).

'dec_StreetAddress'(Bytes, OptOrMand, TagIn) ->
'dec_PDSParameter'(Bytes, OptOrMand, TagIn++[]).



%%================================
%%  PostOfficeBoxAddress
%%================================

'enc_PostOfficeBoxAddress'({'PostOfficeBoxAddress',Val}, TagIn) ->
   'enc_PostOfficeBoxAddress'(Val, TagIn);

'enc_PostOfficeBoxAddress'(Val, TagIn) ->
   'enc_PDSParameter'(Val, TagIn ++ []).


'dec_PostOfficeBoxAddress'(Bytes, OptOrMand) ->
   'dec_PostOfficeBoxAddress'(Bytes, OptOrMand, []).

'dec_PostOfficeBoxAddress'(Bytes, OptOrMand, TagIn) ->
'dec_PDSParameter'(Bytes, OptOrMand, TagIn++[]).



%%================================
%%  PosteRestanteAddress
%%================================

'enc_PosteRestanteAddress'({'PosteRestanteAddress',Val}, TagIn) ->
   'enc_PosteRestanteAddress'(Val, TagIn);

'enc_PosteRestanteAddress'(Val, TagIn) ->
   'enc_PDSParameter'(Val, TagIn ++ []).


'dec_PosteRestanteAddress'(Bytes, OptOrMand) ->
   'dec_PosteRestanteAddress'(Bytes, OptOrMand, []).

'dec_PosteRestanteAddress'(Bytes, OptOrMand, TagIn) ->
'dec_PDSParameter'(Bytes, OptOrMand, TagIn++[]).



%%================================
%%  UniquePostalName
%%================================

'enc_UniquePostalName'({'UniquePostalName',Val}, TagIn) ->
   'enc_UniquePostalName'(Val, TagIn);

'enc_UniquePostalName'(Val, TagIn) ->
   'enc_PDSParameter'(Val, TagIn ++ []).


'dec_UniquePostalName'(Bytes, OptOrMand) ->
   'dec_UniquePostalName'(Bytes, OptOrMand, []).

'dec_UniquePostalName'(Bytes, OptOrMand, TagIn) ->
'dec_PDSParameter'(Bytes, OptOrMand, TagIn++[]).



%%================================
%%  LocalPostalAttributes
%%================================

'enc_LocalPostalAttributes'({'LocalPostalAttributes',Val}, TagIn) ->
   'enc_LocalPostalAttributes'(Val, TagIn);

'enc_LocalPostalAttributes'(Val, TagIn) ->
   'enc_PDSParameter'(Val, TagIn ++ []).


'dec_LocalPostalAttributes'(Bytes, OptOrMand) ->
   'dec_LocalPostalAttributes'(Bytes, OptOrMand, []).

'dec_LocalPostalAttributes'(Bytes, OptOrMand, TagIn) ->
'dec_PDSParameter'(Bytes, OptOrMand, TagIn++[]).



%%================================
%%  PDSParameter
%%================================
'enc_PDSParameter'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type PrintableString OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,'printable-string') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(2,Val,'printable-string'), 19, [])
       end,

%%-------------------------------------------------
%% attribute number 2 with type TeletexString OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,'teletex-string') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(3,Val,'teletex-string'), 20, [])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,17,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_PDSParameter'(Bytes, OptOrMand) ->
   'dec_PDSParameter'(Bytes, OptOrMand, []).

'dec_PDSParameter'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,17,'IMPLICIT',32}], Bytes, OptOrMand), 
   {SetTerm, SetBytes, Rb2} = ?RT_BER:decode_set(0, Len, Bytes1, OptOrMand, fun 'dec_PDSParameter_fun'/2, []),
   'dec_PDSParameter__result__'(lists:sort(SetTerm), SetBytes, Rb1+Rb2).


%%-------------------------------------------------
%% Set loop fun for PDSParameter
%%-------------------------------------------------
'dec_PDSParameter_fun'(Bytes, OptOrMand) ->
   TagList = [{'printable-string',[{'UNIVERSAL','PrintableString'}]},{'teletex-string',[{'UNIVERSAL','TeletexString'}]}],
   case ?RT_BER:check_if_valid_tag(Bytes, TagList, OptOrMand) of
      'printable-string' ->
         {Dec, Rest, RbCho2} = ?RT_BER:decode_restricted_string(Bytes,{1,30},19,[], no_length, mandatory),
{{1,Dec}, Rest, RbCho2};

      'teletex-string' ->
         {Dec, Rest, RbCho3} = ?RT_BER:decode_restricted_string(Bytes,{1,30},20,[], no_length, mandatory),
{{2,Dec}, Rest, RbCho3};

      %% tag not found, if extensionmark we should skip bytes here
      _ -> 
         {[], Bytes,0}
   end.


%%-------------------------------------------------
%% Result PDSParameter
%%-------------------------------------------------
'dec_PDSParameter__result__'(TermList, Bytes, Rb) ->

%%-------------------------------------------------
%% attribute number 1 with type PrintableString OPTIONAL
%%-------------------------------------------------
   {Term1,TermList1} =
      case TermList of
          [{1,TermTmp}|Rest] -> {TermTmp,Rest};
          _ -> {asn1_NOVALUE, TermList}
      end,

%%-------------------------------------------------
%% attribute number 2 with type TeletexString OPTIONAL
%%-------------------------------------------------
   {Term2,TermList2} =
      case TermList1 of
          [{2,TermTmp1}|Rest1] -> {TermTmp1,Rest1};
          _ -> {asn1_NOVALUE, TermList1}
      end,

   case TermList2 of
      [] -> {{'PDSParameter', Term1, Term2}, Bytes, Rb};
      ExtraAtt -> exit({error,{asn1,{too_many_attributes, ExtraAtt}}})
   end.





%%================================
%%  ExtendedNetworkAddress
%%================================

'enc_ExtendedNetworkAddress'({'ExtendedNetworkAddress',Val}, TagIn) ->
   'enc_ExtendedNetworkAddress'(Val, TagIn);

'enc_ExtendedNetworkAddress'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      'e163-4-address' ->
         'enc_ExtendedNetworkAddress_e163-4-address'(element(2,Val), []);
      'psap-address' ->
         'enc_PresentationAddress'(element(2,Val), [{tag,128,0,'IMPLICIT',32}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  ExtendedNetworkAddress_e163-4-address
%%================================
'enc_ExtendedNetworkAddress_e163-4-address'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1 with type NumericString
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(2,Val,number), 18, [{tag,128,0,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type NumericString OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,'sub-address') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(3,Val,'sub-address'), 18, [{tag,128,1,'IMPLICIT',32}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_ExtendedNetworkAddress_e163-4-address'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type NumericString
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_restricted_string(Bytes2,{1,15},18,[{tag,128,0,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 2 with type NumericString OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
?RT_BER:decode_restricted_string(Bytes3,{1,40},18,[{tag,128,1,'IMPLICIT',32}], no_length, mandatory);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'ExtendedNetworkAddress_e163-4-address', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


'dec_ExtendedNetworkAddress'(Bytes, OptOrMand) ->
   'dec_ExtendedNetworkAddress'(Bytes, OptOrMand, []).

'dec_ExtendedNetworkAddress'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'e163-4-address'
      <<0:2,_:1,16:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_ExtendedNetworkAddress_e163-4-address'(Bytes1, mandatory, []),
         {{'e163-4-address', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'psap-address'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_PresentationAddress'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',32}]),
         {{'psap-address', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


%%================================
%%  PresentationAddress
%%================================
'enc_PresentationAddress'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,pSelector) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_octet_string([], ?RT_BER:cindex(2,Val,pSelector), [{tag,128,0,'EXPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 2 with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,sSelector) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_octet_string([], ?RT_BER:cindex(3,Val,sSelector), [{tag,128,1,'EXPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 3 with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,tSelector) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_octet_string([], ?RT_BER:cindex(4,Val,tSelector), [{tag,128,2,'EXPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 4 with type SET OF
%%-------------------------------------------------
   {EncBytes4,EncLen4} = 'enc_PresentationAddress_nAddresses'(?RT_BER:cindex(5,Val,nAddresses), [{tag,128,3,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  PresentationAddress_nAddresses
%%================================

'enc_PresentationAddress_nAddresses'({'PresentationAddress_nAddresses',Val}, TagIn) ->
   'enc_PresentationAddress_nAddresses'(Val, TagIn);

'enc_PresentationAddress_nAddresses'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_PresentationAddress_nAddresses_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,17,'IMPLICIT',32}], EncBytes, EncLen).

'enc_PresentationAddress_nAddresses_components'([], AccBytes, AccLen) -> 
   {asn1rt_check:dynamicsort_SETOF(AccBytes),AccLen};

'enc_PresentationAddress_nAddresses_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = ?RT_BER:encode_octet_string([], H, []),
   'enc_PresentationAddress_nAddresses_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_PresentationAddress_nAddresses'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,17,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun(FBytes,_,_)->
?RT_BER:decode_octet_string(FBytes,[],[], no_length, mandatory)
end, [], []).




'dec_PresentationAddress'(Bytes, OptOrMand) ->
   'dec_PresentationAddress'(Bytes, OptOrMand, []).

'dec_PresentationAddress'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<2:2,_:1,0:5,_/binary>> ->
?RT_BER:decode_octet_string(Bytes2,[],[{tag,128,0,'EXPLICIT',32}], no_length, mandatory);
_ ->
{ asn1_NOVALUE, Bytes2, 0 }
end,

%%-------------------------------------------------
%% attribute number 2 with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
?RT_BER:decode_octet_string(Bytes3,[],[{tag,128,1,'EXPLICIT',32}], no_length, mandatory);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

%%-------------------------------------------------
%% attribute number 3 with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = case Bytes4 of
<<2:2,_:1,2:5,_/binary>> ->
?RT_BER:decode_octet_string(Bytes4,[],[{tag,128,2,'EXPLICIT',32}], no_length, mandatory);
_ ->
{ asn1_NOVALUE, Bytes4, 0 }
end,

%%-------------------------------------------------
%% attribute number 4 with type SET OF
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = 'dec_PresentationAddress_nAddresses'(Bytes5, mandatory, [{tag,128,3,'EXPLICIT',32}]),

   {Bytes7,Rb6} = ?RT_BER:restbytes2(RemBytes, Bytes6,noext),
   {{'PresentationAddress', Term1, Term2, Term3, Term4}, Bytes7, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6}.


%%================================
%%  TerminalType
%%================================

'enc_TerminalType'({'TerminalType',Val}, TagIn) ->
   'enc_TerminalType'(Val, TagIn);

'enc_TerminalType'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, [{telex,3},{teletex,4},{'g3-facsimile',5},{'g4-facsimile',6},{'ia5-terminal',7},{videotex,8}], TagIn ++ []).


'dec_TerminalType'(Bytes, OptOrMand) ->
   'dec_TerminalType'(Bytes, OptOrMand, []).

'dec_TerminalType'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_integer(Bytes,{0,256},[{telex,3},{teletex,4},{'g3-facsimile',5},{'g4-facsimile',6},{'ia5-terminal',7},{videotex,8}],TagIn++[], OptOrMand).



%%================================
%%  TeletexDomainDefinedAttributes
%%================================

'enc_TeletexDomainDefinedAttributes'({'TeletexDomainDefinedAttributes',Val}, TagIn) ->
   'enc_TeletexDomainDefinedAttributes'(Val, TagIn);

'enc_TeletexDomainDefinedAttributes'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_TeletexDomainDefinedAttributes_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_TeletexDomainDefinedAttributes_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_TeletexDomainDefinedAttributes_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_TeletexDomainDefinedAttribute'(H, []),
   'enc_TeletexDomainDefinedAttributes_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_TeletexDomainDefinedAttributes'(Bytes, OptOrMand) ->
   'dec_TeletexDomainDefinedAttributes'(Bytes, OptOrMand, []).

'dec_TeletexDomainDefinedAttributes'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_TeletexDomainDefinedAttribute'/3, [], []).




%%================================
%%  TeletexDomainDefinedAttribute
%%================================
'enc_TeletexDomainDefinedAttribute'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type TeletexString
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(2,Val,type), 20, []),

%%-------------------------------------------------
%% attribute number 2 with type TeletexString
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(3,Val,value), 20, []),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_TeletexDomainDefinedAttribute'(Bytes, OptOrMand) ->
   'dec_TeletexDomainDefinedAttribute'(Bytes, OptOrMand, []).

'dec_TeletexDomainDefinedAttribute'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type TeletexString
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_restricted_string(Bytes2,{1,8},20,[], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 2 with type TeletexString
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_restricted_string(Bytes3,{1,128},20,[], no_length, mandatory),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'TeletexDomainDefinedAttribute', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  OCSPRequest
%%================================
'enc_OCSPRequest'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External OCSP:TBSRequest
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_TBSRequest'(?RT_BER:cindex(2,Val,tbsRequest), []),

%%-------------------------------------------------
%% attribute number 2   External OCSP:Signature OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,optionalSignature) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Signature'(?RT_BER:cindex(3,Val,optionalSignature), [{tag,128,0,'EXPLICIT',32}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_OCSPRequest'(Bytes, OptOrMand) ->
   'dec_OCSPRequest'(Bytes, OptOrMand, []).

'dec_OCSPRequest'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External OCSP:TBSRequest
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_TBSRequest'(Bytes2, mandatory, []),

%%-------------------------------------------------
%% attribute number 2   External OCSP:Signature OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,0:5,_/binary>> ->
'dec_Signature'(Bytes3, opt_or_default, [{tag,128,0,'EXPLICIT',32}]);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'OCSPRequest', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  TBSRequest
%%================================
'enc_TBSRequest'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER DEFAULT = 0
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case catch asn1rt_check:check_int(0, ?RT_BER:cindex(2,Val,version), [{v1,0},{v2,1},{v3,2}]) of
            true -> {[],0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,version), [{v1,0},{v2,1},{v3,2}], [{tag,128,0,'EXPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 2   External OCSP:GeneralName OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,requestorName) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_GeneralName'(?RT_BER:cindex(3,Val,requestorName), [{tag,128,1,'EXPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 3 with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_TBSRequest_requestList'(?RT_BER:cindex(4,Val,requestList), []),

%%-------------------------------------------------
%% attribute number 4   External OCSP:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case ?RT_BER:cindex(5,Val,requestExtensions) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Extensions'(?RT_BER:cindex(5,Val,requestExtensions), [{tag,128,2,'EXPLICIT',32}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  TBSRequest_requestList
%%================================

'enc_TBSRequest_requestList'({'TBSRequest_requestList',Val}, TagIn) ->
   'enc_TBSRequest_requestList'(Val, TagIn);

'enc_TBSRequest_requestList'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_TBSRequest_requestList_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_TBSRequest_requestList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_TBSRequest_requestList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_Request'(H, []),
   'enc_TBSRequest_requestList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_TBSRequest_requestList'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_Request'/3, [], []).




'dec_TBSRequest'(Bytes, OptOrMand) ->
   'dec_TBSRequest'(Bytes, OptOrMand, []).

'dec_TBSRequest'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER DEFAULT = 0
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<2:2,_:1,0:5,_/binary>> ->
?RT_BER:decode_integer(Bytes2,[],[{v1,0},{v2,1},{v3,2}],[{tag,128,0,'EXPLICIT',32}], mandatory);
_ ->
{0,Bytes2, 0 }
end,

%%-------------------------------------------------
%% attribute number 2   External OCSP:GeneralName OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
'dec_GeneralName'(Bytes3, opt_or_default, [{tag,128,1,'EXPLICIT',32}]);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

%%-------------------------------------------------
%% attribute number 3 with type SEQUENCE OF
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = 'dec_TBSRequest_requestList'(Bytes4, mandatory, []),

%%-------------------------------------------------
%% attribute number 4   External OCSP:Extensions OPTIONAL
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = case Bytes5 of
<<2:2,_:1,2:5,_/binary>> ->
'dec_Extensions'(Bytes5, opt_or_default, [{tag,128,2,'EXPLICIT',32}]);
_ ->
{ asn1_NOVALUE, Bytes5, 0 }
end,

   {Bytes7,Rb6} = ?RT_BER:restbytes2(RemBytes, Bytes6,noext),
   {{'TBSRequest', Term1, Term2, Term3, Term4}, Bytes7, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6}.


%%================================
%%  Signature
%%================================
'enc_Signature'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External OCSP:AlgorithmIdentifier
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_AlgorithmIdentifier'(?RT_BER:cindex(2,Val,signatureAlgorithm), []),

%%-------------------------------------------------
%% attribute number 2 with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_bit_string([], ?RT_BER:cindex(3,Val,signature), [], []),

%%-------------------------------------------------
%% attribute number 3 with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,certs) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Signature_certs'(?RT_BER:cindex(4,Val,certs), [{tag,128,0,'EXPLICIT',32}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  Signature_certs
%%================================

'enc_Signature_certs'({'Signature_certs',Val}, TagIn) ->
   'enc_Signature_certs'(Val, TagIn);

'enc_Signature_certs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_Signature_certs_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_Signature_certs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_Signature_certs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_Certificate'(H, []),
   'enc_Signature_certs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_Signature_certs'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_Certificate'/3, [], []).




'dec_Signature'(Bytes, OptOrMand) ->
   'dec_Signature'(Bytes, OptOrMand, []).

'dec_Signature'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External OCSP:AlgorithmIdentifier
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_AlgorithmIdentifier'(Bytes2, mandatory, []),

%%-------------------------------------------------
%% attribute number 2 with type BIT STRING
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_bit_string(Bytes3,[],[],[], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 3 with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = case Bytes4 of
<<2:2,_:1,0:5,_/binary>> ->
'dec_Signature_certs'(Bytes4, opt_or_default, [{tag,128,0,'EXPLICIT',32}]);
_ ->
{ asn1_NOVALUE, Bytes4, 0 }
end,

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'Signature', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.


%%================================
%%  Request
%%================================
'enc_Request'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External OCSP:CertID
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_CertID'(?RT_BER:cindex(2,Val,reqCert), []),

%%-------------------------------------------------
%% attribute number 2   External OCSP:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,singleRequestExtensions) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Extensions'(?RT_BER:cindex(3,Val,singleRequestExtensions), [{tag,128,0,'EXPLICIT',32}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_Request'(Bytes, OptOrMand) ->
   'dec_Request'(Bytes, OptOrMand, []).

'dec_Request'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External OCSP:CertID
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_CertID'(Bytes2, mandatory, []),

%%-------------------------------------------------
%% attribute number 2   External OCSP:Extensions OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,0:5,_/binary>> ->
'dec_Extensions'(Bytes3, opt_or_default, [{tag,128,0,'EXPLICIT',32}]);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'Request', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  CertID
%%================================
'enc_CertID'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External OCSP:AlgorithmIdentifier
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_AlgorithmIdentifier'(?RT_BER:cindex(2,Val,hashAlgorithm), []),

%%-------------------------------------------------
%% attribute number 2 with type OCTET STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_octet_string([], ?RT_BER:cindex(3,Val,issuerNameHash), []),

%%-------------------------------------------------
%% attribute number 3 with type OCTET STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_octet_string([], ?RT_BER:cindex(4,Val,issuerKeyHash), []),

%%-------------------------------------------------
%% attribute number 4 with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = ?RT_BER:encode_integer([], ?RT_BER:cindex(5,Val,serialNumber), []),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_CertID'(Bytes, OptOrMand) ->
   'dec_CertID'(Bytes, OptOrMand, []).

'dec_CertID'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External OCSP:AlgorithmIdentifier
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_AlgorithmIdentifier'(Bytes2, mandatory, []),

%%-------------------------------------------------
%% attribute number 2 with type OCTET STRING
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_octet_string(Bytes3,[],[], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 3 with type OCTET STRING
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_octet_string(Bytes4,[],[], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 4 with type INTEGER
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = ?RT_BER:decode_integer(Bytes5,[],[], mandatory),

   {Bytes7,Rb6} = ?RT_BER:restbytes2(RemBytes, Bytes6,noext),
   {{'CertID', Term1, Term2, Term3, Term4}, Bytes7, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6}.


%%================================
%%  OCSPResponse
%%================================
'enc_OCSPResponse'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,responseStatus) of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,responseStatus) end) of
successful -> ?RT_BER:encode_enumerated(0,[]);
malformedRequest -> ?RT_BER:encode_enumerated(1,[]);
internalError -> ?RT_BER:encode_enumerated(2,[]);
tryLater -> ?RT_BER:encode_enumerated(3,[]);
sigRequired -> ?RT_BER:encode_enumerated(5,[]);
unauthorized -> ?RT_BER:encode_enumerated(6,[]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 2   External OCSP:ResponseBytes OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,responseBytes) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ResponseBytes'(?RT_BER:cindex(3,Val,responseBytes), [{tag,128,0,'EXPLICIT',32}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_OCSPResponse'(Bytes, OptOrMand) ->
   'dec_OCSPResponse'(Bytes, OptOrMand, []).

'dec_OCSPResponse'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],[{successful,0},{malformedRequest,1},{internalError,2},{tryLater,3},{sigRequired,5},{unauthorized,6}],[], mandatory),

%%-------------------------------------------------
%% attribute number 2   External OCSP:ResponseBytes OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,0:5,_/binary>> ->
'dec_ResponseBytes'(Bytes3, opt_or_default, [{tag,128,0,'EXPLICIT',32}]);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'OCSPResponse', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  OCSPResponseStatus
%%================================

'enc_OCSPResponseStatus'({'OCSPResponseStatus',Val}, TagIn) ->
   'enc_OCSPResponseStatus'(Val, TagIn);

'enc_OCSPResponseStatus'(Val, TagIn) ->
case (case Val of {_,Enumval1}->Enumval1;_->Val end) of
successful -> ?RT_BER:encode_enumerated(0,TagIn ++ []);
malformedRequest -> ?RT_BER:encode_enumerated(1,TagIn ++ []);
internalError -> ?RT_BER:encode_enumerated(2,TagIn ++ []);
tryLater -> ?RT_BER:encode_enumerated(3,TagIn ++ []);
sigRequired -> ?RT_BER:encode_enumerated(5,TagIn ++ []);
unauthorized -> ?RT_BER:encode_enumerated(6,TagIn ++ []);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end.


'dec_OCSPResponseStatus'(Bytes, OptOrMand) ->
   'dec_OCSPResponseStatus'(Bytes, OptOrMand, []).

'dec_OCSPResponseStatus'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_enumerated(Bytes,[],[{successful,0},{malformedRequest,1},{internalError,2},{tryLater,3},{sigRequired,5},{unauthorized,6}],TagIn++[], OptOrMand).



%%================================
%%  ResponseBytes
%%================================
'enc_ResponseBytes'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type OBJECT IDENTIFIER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_object_identifier(?RT_BER:cindex(2,Val,responseType), []),

%%-------------------------------------------------
%% attribute number 2 with type OCTET STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_octet_string([], ?RT_BER:cindex(3,Val,response), []),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_ResponseBytes'(Bytes, OptOrMand) ->
   'dec_ResponseBytes'(Bytes, OptOrMand, []).

'dec_ResponseBytes'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type OBJECT IDENTIFIER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_object_identifier(Bytes2,[], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type OCTET STRING
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_octet_string(Bytes3,[],[], no_length, mandatory),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'ResponseBytes', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  BasicOCSPResponse
%%================================
'enc_BasicOCSPResponse'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External OCSP:ResponseData
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ResponseData'(?RT_BER:cindex(2,Val,tbsResponseData), []),

%%-------------------------------------------------
%% attribute number 2   External OCSP:AlgorithmIdentifier
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_AlgorithmIdentifier'(?RT_BER:cindex(3,Val,signatureAlgorithm), []),

%%-------------------------------------------------
%% attribute number 3 with type BIT STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_bit_string([], ?RT_BER:cindex(4,Val,signature), [], []),

%%-------------------------------------------------
%% attribute number 4 with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case ?RT_BER:cindex(5,Val,certs) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_BasicOCSPResponse_certs'(?RT_BER:cindex(5,Val,certs), [{tag,128,0,'EXPLICIT',32}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  BasicOCSPResponse_certs
%%================================

'enc_BasicOCSPResponse_certs'({'BasicOCSPResponse_certs',Val}, TagIn) ->
   'enc_BasicOCSPResponse_certs'(Val, TagIn);

'enc_BasicOCSPResponse_certs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_BasicOCSPResponse_certs_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_BasicOCSPResponse_certs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_BasicOCSPResponse_certs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_Certificate'(H, []),
   'enc_BasicOCSPResponse_certs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_BasicOCSPResponse_certs'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_Certificate'/3, [], []).




'dec_BasicOCSPResponse'(Bytes, OptOrMand) ->
   'dec_BasicOCSPResponse'(Bytes, OptOrMand, []).

'dec_BasicOCSPResponse'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External OCSP:ResponseData
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_ResponseData'(Bytes2, mandatory, []),

%%-------------------------------------------------
%% attribute number 2   External OCSP:AlgorithmIdentifier
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_AlgorithmIdentifier'(Bytes3, mandatory, []),

%%-------------------------------------------------
%% attribute number 3 with type BIT STRING
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_bit_string(Bytes4,[],[],[], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 4 with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = case Bytes5 of
<<2:2,_:1,0:5,_/binary>> ->
'dec_BasicOCSPResponse_certs'(Bytes5, opt_or_default, [{tag,128,0,'EXPLICIT',32}]);
_ ->
{ asn1_NOVALUE, Bytes5, 0 }
end,

   {Bytes7,Rb6} = ?RT_BER:restbytes2(RemBytes, Bytes6,noext),
   {{'BasicOCSPResponse', Term1, Term2, Term3, Term4}, Bytes7, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6}.


%%================================
%%  ResponseData
%%================================
'enc_ResponseData'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER DEFAULT = 0
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case catch asn1rt_check:check_int(0, ?RT_BER:cindex(2,Val,version), [{v1,0},{v2,1},{v3,2}]) of
            true -> {[],0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,version), [{v1,0},{v2,1},{v3,2}], [{tag,128,0,'EXPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 2   External OCSP:ResponderID
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_ResponderID'(?RT_BER:cindex(3,Val,responderID), []),

%%-------------------------------------------------
%% attribute number 3 with type GeneralizedTime
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_generalized_time([], ?RT_BER:cindex(4,Val,producedAt), []),

%%-------------------------------------------------
%% attribute number 4 with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes4,EncLen4} = 'enc_ResponseData_responses'(?RT_BER:cindex(5,Val,responses), []),

%%-------------------------------------------------
%% attribute number 5   External OCSP:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case ?RT_BER:cindex(6,Val,responseExtensions) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Extensions'(?RT_BER:cindex(6,Val,responseExtensions), [{tag,128,1,'EXPLICIT',32}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  ResponseData_responses
%%================================

'enc_ResponseData_responses'({'ResponseData_responses',Val}, TagIn) ->
   'enc_ResponseData_responses'(Val, TagIn);

'enc_ResponseData_responses'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ResponseData_responses_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_ResponseData_responses_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ResponseData_responses_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_SingleResponse'(H, []),
   'enc_ResponseData_responses_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_ResponseData_responses'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_SingleResponse'/3, [], []).




'dec_ResponseData'(Bytes, OptOrMand) ->
   'dec_ResponseData'(Bytes, OptOrMand, []).

'dec_ResponseData'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER DEFAULT = 0
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<2:2,_:1,0:5,_/binary>> ->
?RT_BER:decode_integer(Bytes2,[],[{v1,0},{v2,1},{v3,2}],[{tag,128,0,'EXPLICIT',32}], mandatory);
_ ->
{0,Bytes2, 0 }
end,

%%-------------------------------------------------
%% attribute number 2   External OCSP:ResponderID
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_ResponderID'(Bytes3, mandatory, []),

%%-------------------------------------------------
%% attribute number 3 with type GeneralizedTime
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_generalized_time(Bytes4,[],[], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 4 with type SEQUENCE OF
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = 'dec_ResponseData_responses'(Bytes5, mandatory, []),

%%-------------------------------------------------
%% attribute number 5   External OCSP:Extensions OPTIONAL
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = case Bytes6 of
<<2:2,_:1,1:5,_/binary>> ->
'dec_Extensions'(Bytes6, opt_or_default, [{tag,128,1,'EXPLICIT',32}]);
_ ->
{ asn1_NOVALUE, Bytes6, 0 }
end,

   {Bytes8,Rb7} = ?RT_BER:restbytes2(RemBytes, Bytes7,noext),
   {{'ResponseData', Term1, Term2, Term3, Term4, Term5}, Bytes8, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7}.


%%================================
%%  ResponderID
%%================================

'enc_ResponderID'({'ResponderID',Val}, TagIn) ->
   'enc_ResponderID'(Val, TagIn);

'enc_ResponderID'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      byName ->
         'enc_Name'(element(2,Val), [{tag,128,1,'EXPLICIT',32}]);
      byKey ->
         ?RT_BER:encode_octet_string([], element(2,Val), [{tag,128,2,'EXPLICIT',32}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).




'dec_ResponderID'(Bytes, OptOrMand) ->
   'dec_ResponderID'(Bytes, OptOrMand, []).

'dec_ResponderID'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'byName'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_Name'(Bytes1, mandatory, [{tag,128,1,'EXPLICIT',32}]),
         {{byName, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'byKey'
      <<2:2,_:1,2:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_octet_string(Bytes1,[],[{tag,128,2,'EXPLICIT',32}], no_length, mandatory),
         {{byKey, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


%%================================
%%  KeyHash
%%================================

'enc_KeyHash'({'KeyHash',Val}, TagIn) ->
   'enc_KeyHash'(Val, TagIn);

'enc_KeyHash'(Val, TagIn) ->
?RT_BER:encode_octet_string([], Val, TagIn ++ []).


'dec_KeyHash'(Bytes, OptOrMand) ->
   'dec_KeyHash'(Bytes, OptOrMand, []).

'dec_KeyHash'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_octet_string(Bytes,[],TagIn++[], no_length, OptOrMand).



%%================================
%%  SingleResponse
%%================================
'enc_SingleResponse'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External OCSP:CertID
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_CertID'(?RT_BER:cindex(2,Val,certID), []),

%%-------------------------------------------------
%% attribute number 2   External OCSP:CertStatus
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_CertStatus'(?RT_BER:cindex(3,Val,certStatus), []),

%%-------------------------------------------------
%% attribute number 3 with type GeneralizedTime
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_generalized_time([], ?RT_BER:cindex(4,Val,thisUpdate), []),

%%-------------------------------------------------
%% attribute number 4 with type GeneralizedTime OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case ?RT_BER:cindex(5,Val,nextUpdate) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_generalized_time([], ?RT_BER:cindex(5,Val,nextUpdate), [{tag,128,0,'EXPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 5   External OCSP:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case ?RT_BER:cindex(6,Val,singleExtensions) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Extensions'(?RT_BER:cindex(6,Val,singleExtensions), [{tag,128,1,'EXPLICIT',32}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_SingleResponse'(Bytes, OptOrMand) ->
   'dec_SingleResponse'(Bytes, OptOrMand, []).

'dec_SingleResponse'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External OCSP:CertID
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_CertID'(Bytes2, mandatory, []),

%%-------------------------------------------------
%% attribute number 2   External OCSP:CertStatus
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_CertStatus'(Bytes3, mandatory, []),

%%-------------------------------------------------
%% attribute number 3 with type GeneralizedTime
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_generalized_time(Bytes4,[],[], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 4 with type GeneralizedTime OPTIONAL
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = case Bytes5 of
<<2:2,_:1,0:5,_/binary>> ->
?RT_BER:decode_generalized_time(Bytes5,[],[{tag,128,0,'EXPLICIT',32}], no_length, mandatory);
_ ->
{ asn1_NOVALUE, Bytes5, 0 }
end,

%%-------------------------------------------------
%% attribute number 5   External OCSP:Extensions OPTIONAL
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = case Bytes6 of
<<2:2,_:1,1:5,_/binary>> ->
'dec_Extensions'(Bytes6, opt_or_default, [{tag,128,1,'EXPLICIT',32}]);
_ ->
{ asn1_NOVALUE, Bytes6, 0 }
end,

   {Bytes8,Rb7} = ?RT_BER:restbytes2(RemBytes, Bytes7,noext),
   {{'SingleResponse', Term1, Term2, Term3, Term4, Term5}, Bytes8, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7}.


%%================================
%%  CertStatus
%%================================

'enc_CertStatus'({'CertStatus',Val}, TagIn) ->
   'enc_CertStatus'(Val, TagIn);

'enc_CertStatus'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      good ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,0,'IMPLICIT',32}]);
      revoked ->
         'enc_RevokedInfo'(element(2,Val), [{tag,128,1,'IMPLICIT',32}]);
      unknown ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,2,'IMPLICIT',32}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).




'dec_CertStatus'(Bytes, OptOrMand) ->
   'dec_CertStatus'(Bytes, OptOrMand, []).

'dec_CertStatus'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'good'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,0,'IMPLICIT',32}], mandatory),
         {{good, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'revoked'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_RevokedInfo'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',32}]),
         {{revoked, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'unknown'
      <<2:2,_:1,2:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,2,'IMPLICIT',32}], mandatory),
         {{unknown, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


%%================================
%%  RevokedInfo
%%================================
'enc_RevokedInfo'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type GeneralizedTime
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_generalized_time([], ?RT_BER:cindex(2,Val,revocationTime), []),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,revocationReason) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case (case ?RT_BER:cindex(3,Val,revocationReason) of {_,Enumval2}->Enumval2;_->?RT_BER:cindex(3,Val,revocationReason) end) of
unspecified -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'EXPLICIT',32}]);
keyCompromise -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'EXPLICIT',32}]);
cACompromise -> ?RT_BER:encode_enumerated(2,[{tag,128,0,'EXPLICIT',32}]);
affiliationChanged -> ?RT_BER:encode_enumerated(3,[{tag,128,0,'EXPLICIT',32}]);
superseded -> ?RT_BER:encode_enumerated(4,[{tag,128,0,'EXPLICIT',32}]);
cessationOfOperation -> ?RT_BER:encode_enumerated(5,[{tag,128,0,'EXPLICIT',32}]);
certificateHold -> ?RT_BER:encode_enumerated(6,[{tag,128,0,'EXPLICIT',32}]);
removeFromCRL -> ?RT_BER:encode_enumerated(8,[{tag,128,0,'EXPLICIT',32}]);
privilegeWithdrawn -> ?RT_BER:encode_enumerated(9,[{tag,128,0,'EXPLICIT',32}]);
aACompromise -> ?RT_BER:encode_enumerated(10,[{tag,128,0,'EXPLICIT',32}]);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_RevokedInfo'(Bytes, OptOrMand) ->
   'dec_RevokedInfo'(Bytes, OptOrMand, []).

'dec_RevokedInfo'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type GeneralizedTime
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_generalized_time(Bytes2,[],[], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,0:5,_/binary>> ->
?RT_BER:decode_enumerated(Bytes3,[],[{unspecified,0},{keyCompromise,1},{cACompromise,2},{affiliationChanged,3},{superseded,4},{cessationOfOperation,5},{certificateHold,6},{removeFromCRL,8},{privilegeWithdrawn,9},{aACompromise,10}],[{tag,128,0,'EXPLICIT',32}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'RevokedInfo', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  UnknownInfo
%%================================

'enc_UnknownInfo'({'UnknownInfo',Val}, TagIn) ->
   'enc_UnknownInfo'(Val, TagIn);

'enc_UnknownInfo'(Val, TagIn) ->
?RT_BER:encode_null(Val, TagIn ++ []).


'dec_UnknownInfo'(Bytes, OptOrMand) ->
   'dec_UnknownInfo'(Bytes, OptOrMand, []).

'dec_UnknownInfo'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_null(Bytes,TagIn++[], OptOrMand).



%%================================
%%  ArchiveCutoff
%%================================

'enc_ArchiveCutoff'({'ArchiveCutoff',Val}, TagIn) ->
   'enc_ArchiveCutoff'(Val, TagIn);

'enc_ArchiveCutoff'(Val, TagIn) ->
?RT_BER:encode_generalized_time([], Val, TagIn ++ []).


'dec_ArchiveCutoff'(Bytes, OptOrMand) ->
   'dec_ArchiveCutoff'(Bytes, OptOrMand, []).

'dec_ArchiveCutoff'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_generalized_time(Bytes,[],TagIn++[], no_length, OptOrMand).



%%================================
%%  AcceptableResponses
%%================================

'enc_AcceptableResponses'({'AcceptableResponses',Val}, TagIn) ->
   'enc_AcceptableResponses'(Val, TagIn);

'enc_AcceptableResponses'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_AcceptableResponses_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_AcceptableResponses_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_AcceptableResponses_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = ?RT_BER:encode_object_identifier(H, []),
   'enc_AcceptableResponses_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_AcceptableResponses'(Bytes, OptOrMand) ->
   'dec_AcceptableResponses'(Bytes, OptOrMand, []).

'dec_AcceptableResponses'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun(FBytes,_,_)->
?RT_BER:decode_object_identifier(FBytes,[], mandatory)
end, [], []).




%%================================
%%  ServiceLocator
%%================================
'enc_ServiceLocator'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External OCSP:Name
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_Name'(?RT_BER:cindex(2,Val,issuer), []),

%%-------------------------------------------------
%% attribute number 2   External OCSP:AuthorityInfoAccessSyntax
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_AuthorityInfoAccessSyntax'(?RT_BER:cindex(3,Val,locator), []),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_ServiceLocator'(Bytes, OptOrMand) ->
   'dec_ServiceLocator'(Bytes, OptOrMand, []).

'dec_ServiceLocator'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External OCSP:Name
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_Name'(Bytes2, mandatory, []),

%%-------------------------------------------------
%% attribute number 2   External OCSP:AuthorityInfoAccessSyntax
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_AuthorityInfoAccessSyntax'(Bytes3, mandatory, []),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'ServiceLocator', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.
'id-ce'() ->
{2,5,29}.

'id-ce-authorityKeyIdentifier'() ->
{2,5,29,35}.

'id-ce-subjectKeyIdentifier'() ->
{2,5,29,14}.

'id-ce-keyUsage'() ->
{2,5,29,15}.

'id-ce-privateKeyUsagePeriod'() ->
{2,5,29,16}.

'id-ce-certificatePolicies'() ->
{2,5,29,32}.

'anyPolicy'() ->
{2,5,29,32,0}.

'id-ce-policyMappings'() ->
{2,5,29,33}.

'id-ce-subjectAltName'() ->
{2,5,29,17}.

'id-ce-issuerAltName'() ->
{2,5,29,18}.

'id-ce-subjectDirectoryAttributes'() ->
{2,5,29,9}.

'id-ce-basicConstraints'() ->
{2,5,29,19}.

'id-ce-nameConstraints'() ->
{2,5,29,30}.

'id-ce-policyConstraints'() ->
{2,5,29,36}.

'id-ce-cRLDistributionPoints'() ->
{2,5,29,31}.

'id-ce-extKeyUsage'() ->
{2,5,29,37}.

'anyExtendedKeyUsage'() ->
{2,5,29,37,0}.

'id-kp-serverAuth'() ->
{1,3,6,1,5,5,7,3,1}.

'id-kp-clientAuth'() ->
{1,3,6,1,5,5,7,3,2}.

'id-kp-codeSigning'() ->
{1,3,6,1,5,5,7,3,3}.

'id-kp-emailProtection'() ->
{1,3,6,1,5,5,7,3,4}.

'id-kp-timeStamping'() ->
{1,3,6,1,5,5,7,3,8}.

'id-kp-OCSPSigning'() ->
{1,3,6,1,5,5,7,3,9}.

'id-ce-inhibitAnyPolicy'() ->
{2,5,29,54}.

'id-ce-freshestCRL'() ->
{2,5,29,46}.

'id-pe-authorityInfoAccess'() ->
{1,3,6,1,5,5,7,1,1}.

'id-pe-subjectInfoAccess'() ->
{1,3,6,1,5,5,7,1,11}.

'id-ce-cRLNumber'() ->
{2,5,29,20}.

'id-ce-issuingDistributionPoint'() ->
{2,5,29,28}.

'id-ce-deltaCRLIndicator'() ->
{2,5,29,27}.

'id-ce-cRLReasons'() ->
{2,5,29,21}.

'id-ce-certificateIssuer'() ->
{2,5,29,29}.

'id-ce-holdInstructionCode'() ->
{2,5,29,23}.

'holdInstruction'() ->
{2,2,840,10040,2}.

'id-holdinstruction-none'() ->
{2,2,840,10040,2,1}.

'id-holdinstruction-callissuer'() ->
{2,2,840,10040,2,2}.

'id-holdinstruction-reject'() ->
{2,2,840,10040,2,3}.

'id-ce-invalidityDate'() ->
{2,5,29,24}.

'id-pkix'() ->
{1,3,6,1,5,5,7}.

'id-pe'() ->
{1,3,6,1,5,5,7,1}.

'id-qt'() ->
{1,3,6,1,5,5,7,2}.

'id-kp'() ->
{1,3,6,1,5,5,7,3}.

'id-ad'() ->
{1,3,6,1,5,5,7,48}.

'id-qt-cps'() ->
{1,3,6,1,5,5,7,2,1}.

'id-qt-unotice'() ->
{1,3,6,1,5,5,7,2,2}.

'id-ad-ocsp'() ->
{1,3,6,1,5,5,7,48,1}.

'id-ad-caIssuers'() ->
{1,3,6,1,5,5,7,48,2}.

'id-ad-timeStamping'() ->
{1,3,6,1,5,5,7,48,3}.

'id-ad-caRepository'() ->
{1,3,6,1,5,5,7,48,5}.

'id-at'() ->
{2,5,4}.

'id-at-name'() ->
{2,5,4,41}.

'id-at-surname'() ->
{2,5,4,4}.

'id-at-givenName'() ->
{2,5,4,42}.

'id-at-initials'() ->
{2,5,4,43}.

'id-at-generationQualifier'() ->
{2,5,4,44}.

'id-at-commonName'() ->
{2,5,4,3}.

'id-at-localityName'() ->
{2,5,4,7}.

'id-at-stateOrProvinceName'() ->
{2,5,4,8}.

'id-at-organizationName'() ->
{2,5,4,10}.

'id-at-organizationalUnitName'() ->
{2,5,4,11}.

'id-at-title'() ->
{2,5,4,12}.

'id-at-dnQualifier'() ->
{2,5,4,46}.

'id-at-countryName'() ->
{2,5,4,6}.

'id-at-serialNumber'() ->
{2,5,4,5}.

'id-at-pseudonym'() ->
{2,5,4,65}.

'id-domainComponent'() ->
{0,9,2342,19200300,100,1,25}.

'pkcs-9'() ->
{1,2,840,113549,1,9}.

'id-emailAddress'() ->
{1,2,840,113549,1,9,1}.

'common-name'() ->
1.

'teletex-common-name'() ->
2.

'teletex-organization-name'() ->
3.

'teletex-personal-name'() ->
4.

'teletex-organizational-unit-names'() ->
5.

'pds-name'() ->
7.

'physical-delivery-country-name'() ->
8.

'postal-code'() ->
9.

'physical-delivery-office-name'() ->
10.

'physical-delivery-office-number'() ->
11.

'extension-OR-address-components'() ->
12.

'physical-delivery-personal-name'() ->
13.

'physical-delivery-organization-name'() ->
14.

'extension-physical-delivery-address-components'() ->
15.

'unformatted-postal-address'() ->
16.

'street-address'() ->
17.

'post-office-box-address'() ->
18.

'poste-restante-address'() ->
19.

'unique-postal-name'() ->
20.

'local-postal-attributes'() ->
21.

'extended-network-address'() ->
22.

'terminal-type'() ->
23.

'teletex-domain-defined-attributes'() ->
6.

'ub-name'() ->
32768.

'ub-common-name'() ->
64.

'ub-locality-name'() ->
128.

'ub-state-name'() ->
128.

'ub-organization-name'() ->
64.

'ub-organizational-unit-name'() ->
64.

'ub-title'() ->
64.

'ub-serial-number'() ->
64.

'ub-match'() ->
128.

'ub-emailaddress-length'() ->
255.

'ub-common-name-length'() ->
64.

'ub-country-name-alpha-length'() ->
2.

'ub-country-name-numeric-length'() ->
3.

'ub-domain-defined-attributes'() ->
4.

'ub-domain-defined-attribute-type-length'() ->
8.

'ub-domain-defined-attribute-value-length'() ->
128.

'ub-domain-name-length'() ->
16.

'ub-extension-attributes'() ->
256.

'ub-e163-4-number-length'() ->
15.

'ub-e163-4-sub-address-length'() ->
40.

'ub-generation-qualifier-length'() ->
3.

'ub-given-name-length'() ->
16.

'ub-initials-length'() ->
5.

'ub-integer-options'() ->
256.

'ub-numeric-user-id-length'() ->
32.

'ub-organization-name-length'() ->
64.

'ub-organizational-unit-name-length'() ->
32.

'ub-organizational-units'() ->
4.

'ub-pds-name-length'() ->
16.

'ub-pds-parameter-length'() ->
30.

'ub-pds-physical-address-lines'() ->
6.

'ub-postal-code-length'() ->
16.

'ub-pseudonym'() ->
128.

'ub-surname-length'() ->
40.

'ub-terminal-id-length'() ->
24.

'ub-unformatted-address-length'() ->
180.

'ub-x121-address-length'() ->
16.

'id-pkix-ocsp'() ->
{1,3,6,1,5,5,7,48,1}.

'id-pkix-ocsp-basic'() ->
{1,3,6,1,5,5,7,48,1,1}.

'id-pkix-ocsp-nonce'() ->
{1,3,6,1,5,5,7,48,1,2}.

'id-pkix-ocsp-crl'() ->
{1,3,6,1,5,5,7,48,1,3}.

'id-pkix-ocsp-response'() ->
{1,3,6,1,5,5,7,48,1,4}.

'id-pkix-ocsp-nocheck'() ->
{1,3,6,1,5,5,7,48,1,5}.

'id-pkix-ocsp-archive-cutoff'() ->
{1,3,6,1,5,5,7,48,1,6}.

'id-pkix-ocsp-service-locator'() ->
{1,3,6,1,5,5,7,48,1,7}.

